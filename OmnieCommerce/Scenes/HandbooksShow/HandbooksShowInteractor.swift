//
//  HandbooksShowInteractor.swift
//  OmnieCommerce
//
//  Created by msm72 on 20.05.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Interactor component VIP-cicle
protocol HandbooksShowInteractorInput {
    func handbooksDidLoad(withRequestModel requestModel: HandbooksShowModels.Items.RequestModel)
    func bussinessCardDidCreateFromHandbook(withRequestModel requestModel: HandbooksShowModels.BussinessCard.RequestModel)
}

// MARK: - Output protocols for Presenter component VIP-cicle
protocol HandbooksShowInteractorOutput {
    func handbooksDidPrepareToShowLoad(fromResponseModel responseModel: HandbooksShowModels.Items.ResponseModel)
    func bussinessCardDidPrepareToShowCreateFromHandbook(fromResponseModel responseModel: HandbooksShowModels.BussinessCard.ResponseModel)
}

class HandbooksShowInteractor: HandbooksShowInteractorInput {
    // MARK: - Properties
    var presenter: HandbooksShowInteractorOutput!
    var worker: HandbooksShowWorker!
    
    
    // MARK: - Custom Functions. Business logic
    func handbooksDidLoad(withRequestModel requestModel: HandbooksShowModels.Items.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userGetHandbooksList(requestModel.parameters, false), withHandlerResponseAPICompletion: { responseAPI in
            let handbooksResponseModel = HandbooksShowModels.Items.ResponseModel(responseAPI: responseAPI)
            self.presenter.handbooksDidPrepareToShowLoad(fromResponseModel: handbooksResponseModel)
        })
    }
    
    func bussinessCardDidCreateFromHandbook(withRequestModel requestModel: HandbooksShowModels.BussinessCard.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userCreateNewBussinessCardFromHandbook(requestModel.parameters, false), withHandlerResponseAPICompletion: { responseAPI in
            // Pass the result to the Presenter
            let bussinessCardResponseModel = HandbooksShowModels.BussinessCard.ResponseModel(responseAPI: responseAPI)
            self.presenter.bussinessCardDidPrepareToShowCreateFromHandbook(fromResponseModel: bussinessCardResponseModel)
        })
    }
}
