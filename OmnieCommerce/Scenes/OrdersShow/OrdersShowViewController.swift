//
//  OrdersShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol OrdersShowViewControllerInput {
    func ordersDidShowLoad(fromViewModel viewModel: OrdersShowModels.Orders.ViewModel)
}

protocol OrdersShowViewControllerOutput {
    func ordersDidLoad(withRequestModel requestModel: OrdersShowModels.Orders.RequestModel)
}

class OrdersShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrdersShowViewControllerOutput!
    var router: OrdersShowRouter!
    
    var orders = [Order]()
    var limit: Int!
    var dateEnd: String!
    var dateStart: String!
    var orderStatus: String = "ALL"
    var statuses = [DropDownValue]()
    var calculatedDate = Date()

    var currentDate: Date! {
        didSet {
            setupTitleLabel(withDate: currentDate)
        }
    }
    
    let orderStatuses = [ "ALL", "DONE", "PENDING FOR USER", "PENDING FOR ADMIN", "CONFIRMED BY USER", "CONFIRMED BY ADMIN",
                          "CANCELED BY USER", "CANCELED BY ADMIN", "FAILED BY USER" ]

    var orderStatesDropDownTableView: MSMTableView! {
        didSet {
            let orderStatesTableManager = MSMTableViewControllerManager.init(withTableView: orderStatesDropDownTableView,
                                                                             andSectionsCount: 1,
                                                                             andEmptyMessageText: "DropDownList")
            
            orderStatesDropDownTableView.tableViewControllerManager = orderStatesTableManager
            orderStatesDropDownTableView.alpha = 0
            
            for (index, status) in orderStatuses.enumerated() {
                statuses.append(DropDownValue.init(String(index), withName: status.localized(), andType: .OrderStatus))
            }
            
            orderStatesDropDownTableView.tableViewControllerManager.dataSource = statuses
            orderStatesDropDownTableView.reloadData()
        }
    }

    // Outlets
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var calendarTitleLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var orderStatusesButton: DropDownButton!
    
    @IBOutlet weak var tableView: MSMTableView! {
        didSet {
            tableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0)
            tableView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, 0)
            
            // Create MSMTableViewControllerManager
            self.tableView.hasHeaders = false
            self.tableView.headears = nil
        }
    }


    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrdersShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Create MSMTableViewControllerManager
        let ordersTableManager = MSMTableViewControllerManager.init(withTableView: self.tableView,
                                                                    andSectionsCount: 1,
                                                                    andEmptyMessageText: "Orders list is empty")
        
        tableView.tableViewControllerManager = ordersTableManager
        
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Parent"
        haveMenuItem = true
        currentDate = Date()
        dateStart = currentDate.convertToString(withStyle: .DateHyphen)
        dateEnd = dateStart
        
        // Set DropDown lists
        orderStatesDropDownTableView = MSMTableView(frame: .zero, style: .plain)
    }

    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        limit = (orders.count == 0) ? Config.Constants.paginationLimit : orders.count
        viewSettingsDidLoad()
    }

    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Load Orders list from CoreData
        guard isNetworkAvailable else {
            ordersListDidShow()
            return
        }
        
        // Load Orders list from API
        if (isNetworkAvailable) {
            orders = [Order]()
            CoreDataManager.instance.entitiesDidRemove(byName: "Lists", andPredicateParameters: NSPredicate(format: "name == %@", "\(keyOrders)-\(orderStatus)"))
            ordersListDidLoad(withOffset: 0, scrollingData: false)
        } else {
            spinnerDidFinish()
        }
    }
    
    func setupTitleLabel(withDate date: Date) {
        calendarTitleLabel.text = date.convertToString(withStyle: .DayMonthYear)
    }

    func setupTitleLabel(withDatesPeriod period: DatesPeriod) {
        calendarTitleLabel.text = "\(period.dateStart.convertToString(withStyle: .DateDot)) - \(period.dateEnd.convertToString(withStyle: .DateDot))"
    }

    func ordersListDidLoad(withOffset offset: Int, scrollingData: Bool) {
        if (!scrollingData) {
            spinnerDidStart(view)
        }
        
        let bodyParameters: [String: Any] = [ "limit": limit, "offset": offset, "status": orderStatus, "start": dateStart, "end": dateEnd ]
        let ordersRequestModel = OrdersShowModels.Orders.RequestModel(parameters: bodyParameters)
        interactor.ordersDidLoad(withRequestModel: ordersRequestModel)
    }

    func ordersListDidShow() {
        // Setting MSMTableViewControllerManager
        let ordersList = CoreDataManager.instance.entitiesDidLoad(byName: "Order", andPredicateParameters: NSPredicate.init(format: "ANY lists.name == %@", "\(keyOrders)-\(orderStatus)"))
        
        if let orders = ordersList as? [Order] {
            let _ = orders.map({ $0.cellIdentifier = "OrderTableViewCell"; $0.cellHeight = 96.0 })
            self.orders = orders
            
            tableView.tableViewControllerManager!.dataSource = orders
            tableView!.tableFooterView!.isHidden = (orders.count > 0) ? true : false
            
            (tableView!.tableFooterView as! MSMTableViewFooterView).didUpload(forItemsCount: orders.count,
                                                                              andEmptyText: "Orders list is empty")
            
            tableView.reloadData()
        }
        
        // Handler select cell
        tableView.tableViewControllerManager!.handlerSelectRowCompletion = { order in
            self.router.navigateToOrderShowScene(withOrderID: (order as! Order).codeID)
        }
        
        // Handler PullRefresh
        tableView.tableViewControllerManager!.handlerPullRefreshCompletion = { _ in
            // Reload Orders list from API
            self.orders = [Order]()
            CoreDataManager.instance.entitiesDidRemove(byName: "Lists", andPredicateParameters: NSPredicate(format: "name == %@", "\(keyOrders)-\(self.orderStatus)"))
            self.limit = Config.Constants.paginationLimit
            self.ordersListDidLoad(withOffset: 0, scrollingData: true)
        }
        
        // Handler InfiniteScroll
        tableView.tableViewControllerManager.handlerInfiniteScrollCompletion = { _ in
            // Load More Orders from API
            self.ordersListDidLoad(withOffset: self.orders.count, scrollingData: true)
        }
        
        tableView.tableViewControllerManager.pullRefreshDidFinish()
        spinnerDidFinish()
    }

    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
        orderStatusesButton.setNeedsDisplay()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerPreviousButtonTap(_ sender: UIButton) {
        calculatedDate = calculatedDate.previousMonth()
        setupTitleLabel(withDate: calculatedDate)

        // Set Orders list period
        dateStart = calculatedDate.convertToString(withStyle: .DateHyphen)
        dateEnd = dateStart
        
        // Clear Orders list & run API
        orders = [Order]()
        CoreDataManager.instance.entitiesDidRemove(byName: "Lists", andPredicateParameters: NSPredicate(format: "name == %@", "\(keyOrders)-\(self.orderStatus)"))
        ordersListDidLoad(withOffset: 0, scrollingData: false)
    }
    
    @IBAction func handlerNextButtonTap(_ sender: UIButton) {
        calculatedDate = calculatedDate.nextMonth()
        setupTitleLabel(withDate: calculatedDate)

        // Set Orders list period
        dateStart = currentDate.convertToString(withStyle: .DateHyphen)
        dateEnd = dateStart

        // Clear Orders list & run API
        orders = [Order]()
        CoreDataManager.instance.entitiesDidRemove(byName: "Lists", andPredicateParameters: NSPredicate(format: "name == %@", "\(keyOrders)-\(self.orderStatus)"))
        ordersListDidLoad(withOffset: 0, scrollingData: false)
    }
    
    @IBAction func handlerCalendarTitleButtonTap(_ sender: UIButton) {
        self.router.navigateToCalendar(withOrdersFromPeriod: (dateStart.convertToDate(withDateFormat: .ResponseDate), dateEnd.convertToDate(withDateFormat: .ResponseDate)))
    }
    
    @IBAction func handlerOrderStatusesButtonTap(_ sender: DropDownButton) {
        (sender.isDropDownListShow) ?   sender.itemsListDidHide(orderStatesDropDownTableView, inView: view) :
                                        sender.itemsListDidShow(orderStatesDropDownTableView, inView: view)
        
        // Handler DropDownList selection
        orderStatesDropDownTableView.tableViewControllerManager!.handlerSelectRowCompletion = { item in
            sender.changeTitle(newValue: (item as! DropDownItem).name)
            sender.itemsListDidHide(self.orderStatesDropDownTableView, inView: self.view)
            self.limit = Config.Constants.paginationLimit
            self.orderStatus = (item as! DropDownItem).name
            self.viewSettingsDidLoad()
        }
    }
}


// MARK: - OrdersShowViewControllerInput
extension OrdersShowViewController: OrdersShowViewControllerInput {
    func ordersDidShowLoad(fromViewModel viewModel: OrdersShowModels.Orders.ViewModel) {
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: {
                self.ordersListDidShow()
            })
            
            return
        }
        
        self.ordersListDidShow()
    }
}
