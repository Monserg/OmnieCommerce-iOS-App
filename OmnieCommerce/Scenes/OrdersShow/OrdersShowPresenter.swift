//
//  OrdersShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol OrdersShowPresenterInput {
    func ordersDidPrepareToShowLoad(fromResponseModel responseModel: OrdersShowModels.Orders.ResponseModel)
}

protocol OrdersShowPresenterOutput: class {
    func ordersDidShowLoad(fromViewModel viewModel: OrdersShowModels.Orders.ViewModel)
}

class OrdersShowPresenter: OrdersShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrdersShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func ordersDidPrepareToShowLoad(fromResponseModel responseModel: OrdersShowModels.Orders.ResponseModel) {
        guard responseModel.responseAPI?.body != nil else {
            let ordersViewModel = OrdersShowModels.Orders.ViewModel(status: (responseModel.responseAPI?.status)!)
            self.viewController.ordersDidShowLoad(fromViewModel: ordersViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData objects
        if let ordersList = responseModel.responseAPI!.body as? [Any], ordersList.count > 0 {
            for json in ordersList {
                let item = Order.init(json: json as! [String: AnyObject])
                
                if let order = item {
                    order.catalog = keyOrders
                    CoreDataManager.instance.didSaveContext()
                }
                
                let ordersViewModel = OrdersShowModels.Orders.ViewModel(status: (responseModel.responseAPI?.status)!)
                self.viewController.ordersDidShowLoad(fromViewModel: ordersViewModel)
            }
        } else {
            let ordersViewModel = OrdersShowModels.Orders.ViewModel(status: (responseModel.responseAPI?.status)!)
            self.viewController.ordersDidShowLoad(fromViewModel: ordersViewModel)
        }
    }
}
