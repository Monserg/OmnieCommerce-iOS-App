//
//  OrdersShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol OrdersShowPresenterInput {
    func ordersDidPrepareToShowLoad(fromResponseModel responseModel: OrdersShowModels.Orders.ResponseModel)
}

protocol OrdersShowPresenterOutput: class {
    func ordersDidShowLoad(fromViewModel viewModel: OrdersShowModels.Orders.ViewModel)
}

class OrdersShowPresenter: OrdersShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrdersShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func ordersDidPrepareToShowLoad(fromResponseModel responseModel: OrdersShowModels.Orders.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let ordersViewModel = OrdersShowModels.Orders.ViewModel(status: "RESPONSE_NIL", isDatesAPI: responseModel.isDatesAPI, ordersDates: nil)
            viewController.ordersDidShowLoad(fromViewModel: ordersViewModel)
            
            return
        }

        // Convert responseAPI body to Order CoreData objects
        var ordersDates = [Date]()
        
        if let dictionaryOrders = responseModel.responseAPI!.body as? [[String: AnyObject]] {
            for dictionary in dictionaryOrders {
                if let orders = dictionary["orders"] as? [[String: AnyObject]], orders.count > 0, let ordersDate = dictionary["date"] as? String {
                    if (responseModel.isDatesAPI) {
                        ordersDates.append(ordersDate.convertToDate(withDateFormat: .ResponseDate))
                    } else {
                        for jsonOrder in orders {
                            if let codeID = jsonOrder["uuid"] as? String {
                                if let order = CoreDataManager.instance.entityBy("Order", andCodeID: codeID) as? Order {
                                    order.profileDidUpload(json: jsonOrder, forList: keyOrders)
                                }
                            }
                        }
                    }
                }
            }
        }
        
        
        
        
        
        
        
//        if let ordersList = responseModel.responseAPI!.body as? [Any], ordersList.count > 0 {
//            if let orders = ordersList.first as? [String: AnyObject], orders.count > 0 {
//                if let listOrders = orders["orders"] as? [Any], listOrders.count > 0 {
//                    for order in listOrders {
//                        if let jsonOrder = order as? [String: AnyObject] {
//                            if let codeID = jsonOrder["uuid"] as? String {
//                                if let order = CoreDataManager.instance.entityBy("Order", andCodeID: codeID) as? Order {
//                                    if (responseModel.isDatesAPI) {
//                                        ordersDates.append(order.dateStart as Date)
//                                    } else {
//                                        order.profileDidUpload(json: jsonOrder, forList: keyOrders)
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        }
        
        CoreDataManager.instance.didSaveContext()
        
        let ordersViewModel = OrdersShowModels.Orders.ViewModel(status: (responseModel.responseAPI?.status)!,
                                                                isDatesAPI: responseModel.isDatesAPI,
                                                                ordersDates: (responseModel.isDatesAPI ? ordersDates : nil))
        
        self.viewController.ordersDidShowLoad(fromViewModel: ordersViewModel)
    }
}
