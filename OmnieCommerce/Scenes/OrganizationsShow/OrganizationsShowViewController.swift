//
//  OrganizationsShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationsShowViewControllerInput {
    func displaySomething(viewModel: OrganizationsShowModels.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationsShowViewControllerOutput {
    func doSomething(requestModel: OrganizationsShowModels.Something.RequestModel)
}

class OrganizationsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationsShowViewControllerOutput!
    var router: OrganizationsShowRouter!

    var category: Category!
    var organizations = Array<Organization>()

    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var categoriesFilterButton: DropDownButton!
    @IBOutlet weak var organizationsFilterButton: DropDownButton!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        smallTopBarView.type    =   "ChildSearch"
        topBarViewStyle         =   .Small
        setup(topBarView: smallTopBarView)

        initialSetupDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func initialSetupDidLoad() {
        // Set scene title
        smallTopBarView.titleLabel.text = category.title
        
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
        
        // NOTE: Ask the Interactor to do some work
        let requestModel = OrganizationsShowModels.Something.RequestModel()
        interactor.doSomething(requestModel: requestModel)
    }
    
    
    // MARK: - Actions
    @IBAction func handlerMapButtonTap(_ sender: CustomButton) {
        router.navigateToOrganizationsMapShowScene(withOrganizations: organizations)
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        
        categoriesFilterButton.setNeedsDisplay()
        organizationsFilterButton.setNeedsDisplay()
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension OrganizationsShowViewController: OrganizationsShowViewControllerInput {
    func displaySomething(viewModel: OrganizationsShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}
