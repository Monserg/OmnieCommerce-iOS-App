//
//  OrganizationsShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationsShowPresenterInput {
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel)
    func servicesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Services.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationsShowPresenterOutput: class {
    func organizationsDidShowLoad(fromViewModel viewModel: OrganizationsShowModels.Organizations.ViewModel)
    func servicesDidShowLoad(fromViewModel viewModel: OrganizationsShowModels.Services.ViewModel)
}

class OrganizationsShowPresenter: OrganizationsShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationsShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: "RESPONSE_NIL")
            self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
            return
        }
        
        // Convert responseAPI body to Organization CoreData objects
        var counter: Int = 0
        
        if let organizationsList = responseModel.responseAPI!.body as? [[String: AnyObject]] {
            if (organizationsList.count > 0) {
                for jsonOrganization in organizationsList {
                    var subCategoryID: String!
                    
                    if let code = responseModel.parameters["subCategory"] as? String, code.isEmpty {
                        subCategoryID = "All"
                    } else {
                        subCategoryID = responseModel.parameters["subCategory"] as! String
                    }
                        
                    let keyList = "\(keyOrganizations)-\(responseModel.category.codeID)-\(subCategoryID!)"
                    
                    if let organizationID = jsonOrganization["uuid"] as? String {
                        if let organization = CoreDataManager.instance.entityBy("Organization", andCodeID: organizationID) as? Organization {
                            organization.profileDidUpload(json: jsonOrganization, forList: keyList)
                            organization.category = NSSet.init(object: responseModel.category)
                            organization.cellIdentifier = "OrganizationTableViewCell"
                            organization.cellHeight = 96.0
                            
                            if let googlePlaceID = jsonOrganization["placeId"] as? String {
                                organization.googlePlaceDidLoad(positionID: googlePlaceID, completion: {
                                    counter += 1
                                    
                                    if (counter == (responseModel.responseAPI!.body as! [Any]).count) {
                                        CoreDataManager.instance.didSaveContext()
                                        
                                        let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: (responseModel.responseAPI?.status)!)
                                        self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
                                    }
                                })
                            }
                        }
                    }
                }
            } else {
                let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: (responseModel.responseAPI?.status)!)
                self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
            }
        }
    }

    func servicesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Services.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: "RESPONSE_NIL")
            self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)
           
            return
        }
        
        // Convert responseAPI body to Service CoreData objects
        var counter: Int = 0
        
        if let servicesList = responseModel.responseAPI!.body as? [[String: AnyObject]] {
            if (servicesList.count > 0) {
                for jsonService in servicesList {
                    var subCategoryID: String!
                    
                    if let code = responseModel.parameters["subCategory"] as? String, code.isEmpty {
                        subCategoryID = "All"
                    } else {
                        subCategoryID = responseModel.parameters["subCategory"] as! String
                    }
                    
                    let keyList = "\(keyServices)-\(responseModel.category.codeID)-\(subCategoryID!)"
                    
                    if let serviceID = jsonService["uuid"] as? String {
                        if let service = CoreDataManager.instance.entityBy("Service", andCodeID: serviceID) as? Service {
                            service.profileDidUpload(json: jsonService, forList: keyList)
                            service.cellIdentifier = "ServiceTableViewCell"
                            service.cellHeight = 96.0
                            
                            if let googlePlaceID = jsonService["placeId"] as? String {
                                service.googlePlaceDidLoad(positionID: googlePlaceID, completion: {
                                    counter += 1
                                    
                                    if (counter == (responseModel.responseAPI!.body as! [Any]).count) {
                                        CoreDataManager.instance.didSaveContext()
                                        
                                        let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: (responseModel.responseAPI?.status)!)
                                        self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)
                                    }
                                })
                            }
                        }
                    }
                }
            } else {
                let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: (responseModel.responseAPI?.status)!)
                self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)
            }
        }
    }
}
