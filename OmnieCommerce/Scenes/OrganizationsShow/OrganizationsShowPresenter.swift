//
//  OrganizationsShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationsShowPresenterInput {
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationsShowPresenterOutput: class {
    func organizationsDidShowLoad(fromViewModel viewModel: OrganizationsShowModels.Organizations.ViewModel)
}

class OrganizationsShowPresenter: OrganizationsShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationsShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel) {
        // Convert Google Place ID to address strings
        if ((responseModel.response?.body as! [Any]).count > 0) {
            responseModel.response?.organizationsAddressDidLoad(responseModel.response?.body as! [Any], completion: { organizations in
                // Prepare to save Organizations in CoreData
                let _ = organizations.map { $0.category = responseModel.category }
                let entityOrganizations = CoreDataManager.instance.entityDidLoad(byName: keyOrganizations) as! Organizations
                let organizationsData = NSKeyedArchiver.archivedData(withRootObject: organizations) as NSData?
                entityOrganizations.list = organizationsData!
                
                let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(organizations: organizations)
                self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
            })
        } else {
            let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(organizations: nil)
            self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
        }
    }
}
