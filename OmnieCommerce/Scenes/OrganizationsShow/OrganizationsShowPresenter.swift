//
//  OrganizationsShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationsShowPresenterInput {
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel)
    func servicesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Services.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationsShowPresenterOutput: class {
    func organizationsDidShowLoad(fromViewModel viewModel: OrganizationsShowModels.Organizations.ViewModel)
    func servicesDidShowLoad(fromViewModel viewModel: OrganizationsShowModels.Services.ViewModel)
}

class OrganizationsShowPresenter: OrganizationsShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationsShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel) {
        guard responseModel.responseAPI?.body != nil else {
            let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: (responseModel.responseAPI?.status)!)
            self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
            return
        }
        
        // Convert responseAPI body to Organization CoreData objects
        var counter: Int = 0
        
        if let organizationsList = responseModel.responseAPI!.body as? [Any] {
            if (organizationsList.count > 0) {
                for json in organizationsList {
                    var subCategoryID: String!
                    
                    if let code = responseModel.parameters["subCategory"] as? String, code.isEmpty {
                        subCategoryID = "All"
                    } else {
                        subCategoryID = responseModel.parameters["subCategory"] as! String
                    }
                        
                    let keyList = "\(keyOrganizations)-\(responseModel.category.codeID)-\(subCategoryID!)"
                    let item = Organization.init(json: json as! [String: AnyObject], forList: keyList)
                    
                    if let organization = item {
                        organization.category = NSSet.init(object: responseModel.category)
                        organization.cellIdentifier = "OrganizationTableViewCell"
                        organization.cellHeight = 96.0
                        
                        if let googlePlaceID = (json as! [String: AnyObject])["placeId"] as? String {
                            organization.googlePlaceDidLoad(positionID: googlePlaceID, completion: {
                                counter += 1
                                
                                if (counter == (responseModel.responseAPI!.body as! [Any]).count) {
                                    CoreDataManager.instance.didSaveContext()
                                    
                                    let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: (responseModel.responseAPI?.status)!)
                                    self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
                                }
                            })
                        }
                    }
                }
            } else {
                let organizationsViewModel = OrganizationsShowModels.Organizations.ViewModel(status: (responseModel.responseAPI?.status)!)
                self.viewController.organizationsDidShowLoad(fromViewModel: organizationsViewModel)
            }
        }
    }

    func servicesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Services.ResponseModel) {
        guard responseModel.responseAPI?.body != nil else {
            let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: (responseModel.responseAPI?.status)!)
            self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)
           
            return
        }
        
        // Convert responseAPI body to Service CoreData objects
        var counter: Int = 0
        
        if let servicesList = responseModel.responseAPI!.body as? [Any], servicesList.count > 0 {
            for json in servicesList {
                let item = Service.init(json: json as! [String: AnyObject], forOrganization: nil, forList: keyService)
                
                if let service = item {
                    service.cellIdentifier = "ServiceTableViewCell"
                    service.cellHeight = 96.0
                    
                    if let googlePlaceID = (json as! [String: AnyObject])["placeId"] as? String {
                        service.googlePlaceDidLoad(positionID: googlePlaceID, completion: {
                            counter += 1

                            if (counter == (responseModel.responseAPI!.body as! [Any]).count) {
                                CoreDataManager.instance.didSaveContext()
                                
                                let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: (responseModel.responseAPI?.status)!)
                                self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)
                            }
                        })
                    }
                }
            }
        } else {
            let servicesViewModel = OrganizationsShowModels.Services.ViewModel(status: (responseModel.responseAPI?.status)!)
            self.viewController.servicesDidShowLoad(fromViewModel: servicesViewModel)            
        }
    }
}
