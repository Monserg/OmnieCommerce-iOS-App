//
//  OrganizationsShowInteractor.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Interactor component VIP-cicle
protocol OrganizationsShowInteractorInput {
    func servicesDidLoad(withRequestModel requestModel: OrganizationsShowModels.DropDownList.RequestModel)
    func categoriesDidLoad(withRequestModel requestModel: OrganizationsShowModels.DropDownList.RequestModel)
    func organizationsDidLoad(withRequestModel requestModel: OrganizationsShowModels.Organizations.RequestModel)
}

// MARK: - Output protocols for Presenter component VIP-cicle
protocol OrganizationsShowInteractorOutput {
    func servicesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.DropDownList.ResponseModel)
    func categoriesDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.DropDownList.ResponseModel)
    func organizationsDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationsShowModels.Organizations.ResponseModel)
}

class OrganizationsShowInteractor: OrganizationsShowInteractorInput {
    // MARK: - Properties
    var presenter: OrganizationsShowInteractorOutput!
    var worker: OrganizationsShowWorker!
    
    
    // MARK: - Custom Functions. Business logic
    func servicesDidLoad(withRequestModel requestModel: OrganizationsShowModels.DropDownList.RequestModel) {
        worker = OrganizationsShowWorker()
        let services = worker.dropDownListDidLoad(withType: .Services)
        
        let servicesResponseModel = OrganizationsShowModels.DropDownList.ResponseModel(result: services)
        presenter.servicesDidPrepareToShowLoad(fromResponseModel: servicesResponseModel)
    }

    func categoriesDidLoad(withRequestModel requestModel: OrganizationsShowModels.DropDownList.RequestModel) {
        worker = OrganizationsShowWorker()
        let categories = worker.dropDownListDidLoad(withType: .Categories)
        
        let categoriesResponseModel = OrganizationsShowModels.DropDownList.ResponseModel(result: categories)
        presenter.categoriesDidPrepareToShowLoad(fromResponseModel: categoriesResponseModel)
    }

    func organizationsDidLoad(withRequestModel requestModel: OrganizationsShowModels.Organizations.RequestModel) {
        MSMRestApiManager.instance.userGetOrganizationsListByCategory(requestModel.parameters, withHandlerResponseAPICompletion: { responseAPI in
            let organizationsResponseModel = OrganizationsShowModels.Organizations.ResponseModel(response: responseAPI, category: requestModel.category)
            self.presenter.organizationsDidPrepareToShowLoad(fromResponseModel: organizationsResponseModel)
        })
    }
}
