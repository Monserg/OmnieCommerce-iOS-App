//
//  CalendarShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 07.12.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Device
import JTAppleCalendar

// MARK: - Input & Output protocols
protocol CalendarShowViewControllerInput {
    func displaySomething(viewModel: CalendarShow.Something.ViewModel)
}

protocol CalendarShowViewControllerOutput {
    func doSomething(request: CalendarShow.Something.Request)
}

class CalendarShowViewController: BaseViewController, CalendarShowViewControllerInput {
    // MARK: - Properties
    var output: CalendarShowViewControllerOutput!
    var router: CalendarShowRouter!
    
    var handlerConfirmButtonCompletion: HandlerPassDataCompletion?

    var serviceID: String!
    var calendarVC: CalendarViewController?
    var timesheetVC: TimeSheetViewController?
    var orderDateComponents: DateComponents! = Calendar.current.dateComponents([.month, .day, .year, .hour, .minute], from: Date())
    var orderStartTimeComponents: DateComponents?
    var orderEndTimeComponents: DateComponents?
    var animationDirection: AnimationDirection?
    var orderPeriod: Period!
    
    var activeViewController: BaseViewController? {
        didSet {
            guard oldValue != nil else {
                router.updateActiveViewController()
                
                return
            }
            
            animationDirection = ((oldValue?.view.tag)! < (activeViewController?.view.tag)!) ? .FromRightToLeft : .FromLeftToRight
            router.removeInactiveViewController(inactiveViewController: oldValue)
        }
        
        willSet {
            if (newValue == calendarVC) {
                calendarVC!.handlerSelectNewDateCompletion = { newDate in
                    self.dateDidSelect(newDate)
                }
            } else {
                timesheetVC!.handlerShowTimeSheetPickersCompletion = { isShow in
                    if (isShow as! Bool) {
                        if !(self.timeSheetPickersView?.isShow)! {
                            self.timeSheetPickersView = TimeSheetPickersView.init(frame: CGRect.init(origin: .zero, size: .zero))
                            self.timeSheetPickersView.timesPeriod = self.timesheetVC!.currentScheduleView!.timesPeriod
                            self.timeSheetPickersView.didShow(inView: self.view)
                            
                            self.timeSheetPickersView.handlerConfirmButtonCompletion = { timesPeriod in
                                self.timesheetVC!.currentScheduleView!.didChangeGestureMode(to: .ScheduleMove)
                                self.confirmButton.isEnabled = true
                                self.orderPeriod.timesPeriod = timesPeriod as! TimesPeriod
                                self.fromTimeLabel.text = "\(String(self.orderPeriod.timesPeriod.hourStart).twoNumberFormat()):\(String(self.orderPeriod.timesPeriod.minuteStart).twoNumberFormat())"
                                self.toTimeLabel.text = "\(String(self.orderPeriod.timesPeriod.hourEnd).twoNumberFormat()):\(String(self.orderPeriod.timesPeriod.minuteEnd).twoNumberFormat())"
                            }
                        }
                    } else {
                        self.timesheetVC!.currentScheduleView!.didChangeGestureMode(to: .ScheduleMove)
                        self.timeSheetPickersView.didHide()
                    }
                }
            }
        }
    }
    
    // Outlets
    @IBOutlet weak var segmentedControlView: SegmentedControlView!
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var fromTimeLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var toTimeLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var dateStackView: UIView!
    
    @IBOutlet weak var containerLeadingConstraint: NSLayoutConstraint!
    @IBOutlet weak var containerTrailingConstraint: NSLayoutConstraint!
    
    @IBOutlet weak var confirmButton: FillColorButton! {
        didSet {
            confirmButton.isEnabled = false
        }
    }
    
    @IBOutlet weak var dateLabel: UbuntuLightVeryLightGrayLabel! {
        didSet {
            dateLabel.textAlignment = (UIApplication.shared.statusBarOrientation.isPortrait) ? .left : .center
        }
    }

    @IBOutlet weak var bottomDottedBorderView: DottedBorderView! {
        didSet {
            bottomDottedBorderView.style = .AroundDottedRectangle
        }
    }
    
    @IBOutlet var timeSheetPickersView: TimeSheetPickersView!    
    
    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        CalendarShowConfigurator.sharedInstance.configure(viewController: self)
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        calendarVC = UIStoryboard(name: "CalendarShow", bundle: nil).instantiateViewController(withIdentifier: "CalendarVC") as? CalendarViewController
        calendarVC!.selectedDate = Calendar.current.date(from: orderDateComponents)
        timesheetVC = UIStoryboard(name: "CalendarShow", bundle: nil).instantiateViewController(withIdentifier: "TimeSheetVC") as? TimeSheetViewController
        timesheetVC!.timeSheetID = "\(self.serviceID!)-\(Date().convertToString(withStyle: .DateHyphen))"

        activeViewController = calendarVC
        view.backgroundColor = UIColor.veryDarkDesaturatedBlue24
        dateStackView.isHidden = false
        
        dateDidSelect(Calendar.current.date(from: orderDateComponents)!)
        
        setupScene(withSize: view.frame.size)
        setupSegmentedControlView()
        setupContainerView(withSize: view.frame.size)
        setupDateLabel(withDate: Calendar.current.date(from: orderDateComponents)!)

        viewSettingsDidLoad()
        
        timeSheetPickersView.frameDidChange()
    }
    
    override func viewDidLayoutSubviews() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        setupContainerView(withSize: view.frame.size)
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        // NOTE: Ask the Interactor to do some work
        let request = CalendarShow.Something.Request()
        output.doSomething(request: request)
        
        timeSheetPickersView.didHide()
    }
    
    // Display logic
    func displaySomething(viewModel: CalendarShow.Something.ViewModel) {
        print(object: "\(type(of: self)): \(#function) run.")
        
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    func setupScene(withSize size: CGSize) {
        bottomDottedBorderView.setNeedsDisplay()
        segmentedControlView.setNeedsDisplay()
        containerView.setNeedsDisplay()
    }
    
    func setupDateLabel(withDate date: Date) {
        dateLabel.text = date.convertToString(withStyle: .DateDot)
    }
    
    func setupSegmentedControlView() {
        segmentedControlView.actionButtonHandlerCompletion = { sender in
            self.print(object: "\(type(of: self)): \(#function) run. Sender tag = \(sender.tag)")
            
            switch sender.tag {
            case 1:
                self.activeViewController = self.timesheetVC
                
            default:
                self.activeViewController = self.calendarVC
            }
        }
    }
    
    func setupContainerView(withSize size: CGSize) {
        if (Device.size() == .screen3_5Inch && size.width > size.height) {
            containerLeadingConstraint.constant = 0
            containerTrailingConstraint.constant = 10
            
            containerView.layoutIfNeeded()
        }
    }
    
    func dateDidSelect(_ date: Date) {
        self.dateStackView.isHidden = false
        self.setupDateLabel(withDate: date)
        self.orderDateComponents = Calendar.current.dateComponents([.month, .day, .year, .hour, .minute], from: date)
        
        // API "Get timesheet for one day"
        MSMRestApiManager.instance.userRequestDidRun(.userGetOrderTimeSheetForDay(["date": date.convertToString(withStyle: .DateHyphen), "service": self.serviceID], false), withHandlerResponseAPICompletion: { responseAPI in
            let codeID = "\(self.serviceID!)-\(date.convertToString(withStyle: .DateHyphen))"

            if let jsonTimeSheet = responseAPI?.body as? [String: AnyObject], jsonTimeSheet.count > 0 {
                if let timeSheet = CoreDataManager.instance.entityBy("TimeSheet", andCodeID: codeID) as? TimeSheet {
                    timeSheet.profileDidUpload(json: jsonTimeSheet, forService: self.serviceID, andDate: date.convertToString(withStyle: .DateHyphen))
                    self.timesheetVC!.selectedDate = date
                    self.timesheetVC!.timeSheetID = "\(self.serviceID!)-\(date.convertToString(withStyle: .DateHyphen))"
                    
                    // Create TimeSheetItems for Organization work time
                    if let timeSheetItems = jsonTimeSheet["timesheet"] as? [String: AnyObject], timeSheetItems.count > 0 {
                        
                    } else {
                        for index in 0...23 {
                            let start = "\(String(index).twoNumberFormat()):00"
                            let end = (index == 23) ? "\(String(index).twoNumberFormat()):59" : "\(String(index + 1).twoNumberFormat()):00"
                            let itemCodeID = "\(timeSheet.codeID)-\(start)"
                            let date = "\(self.orderDateComponents.year!)-\(String(self.orderDateComponents.month!).twoNumberFormat())-\(String(self.orderDateComponents.day!).twoNumberFormat())T"
                            
                            if let timeSheetItem = CoreDataManager.instance.entityBy("TimeSheetItem", andCodeID: itemCodeID) as? TimeSheetItem {
                                let jsonTimeSheetItem: [String: AnyObject] =    [
                                    "start":    "\(date)\(start)" as AnyObject,
                                    "end":      "\(date)\(end)" as AnyObject,
                                    "type":     "FREE" as AnyObject
                                ]
                                
                                timeSheetItem.profileDidUpload(json: jsonTimeSheetItem, andTimeSheet: timeSheet)
                            }
                        }
                    }
                }
            }
                
            CoreDataManager.instance.didSaveContext()
        })
    }
        
        
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        setupScene(withSize: size)
        dateLabel.textAlignment = (size.height > size.width) ? .left : .center
        timeSheetPickersView.fromLabel.setNeedsDisplay()
    }

    // MARK: - Actions
    @IBAction func handlerConfirmButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        self.navigationController?.popViewController(animated: true)
        handlerConfirmButtonCompletion!(orderPeriod)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        self.navigationController?.popViewController(animated: true)
    }
}
