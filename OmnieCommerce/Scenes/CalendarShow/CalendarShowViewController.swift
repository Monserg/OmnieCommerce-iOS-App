//
//  CalendarShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 07.12.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Device
import JTAppleCalendar

// MARK: - Input & Output protocols
protocol CalendarShowViewControllerInput {
    func displaySomething(viewModel: CalendarShow.Something.ViewModel)
}

protocol CalendarShowViewControllerOutput {
    func doSomething(request: CalendarShow.Something.Request)
}

class CalendarShowViewController: BaseViewController, CalendarShowViewControllerInput {
    // MARK: - Properties
    var output: CalendarShowViewControllerOutput!
    var router: CalendarShowRouter!
    
    var handlerConfirmButtonCompletion: HandlerSendButtonCompletion?

    var serviceID: String!
    var calendarVC: CalendarViewController?
    var timesheetVC: TimeSheetViewController?
    var animationDirection: AnimationDirection?
    
    var activeViewController: BaseViewController? {
        didSet {
            guard oldValue != nil else {
                router.updateActiveViewController()
                
                return
            }
            
            animationDirection = ((oldValue?.view.tag)! < (activeViewController?.view.tag)!) ? .FromRightToLeft : .FromLeftToRight
            router.removeInactiveViewController(inactiveViewController: oldValue)
        }
        
        willSet {
            if (newValue == calendarVC) {
                calendarVC!.handlerSelectNewDateCompletion = { newDate in
                    self.dateDidSelect(newDate)
                    self.segmentedControlView.handlerActionButtonTap(self.segmentedControlView.rightActionButton)
                }
                
                if let calendarView = calendarVC?.calendarView {
                    calendarView.scrollToDate(period.dateStart as Date)
                }
            } else {
                // Handler Pickers confirm button tap
                timesheetVC!.handlerShowTimeSheetPickersCompletion = { isShow in
                    if (isShow as! Bool) {
                        if !(self.timeSheetPickersView?.isShow)! {
                            self.timeSheetPickersView = TimeSheetPickersView.init(frame: CGRect.init(origin: .zero, size: .zero))
//                            self.timeSheetPickersView.timesPeriod = self.timesheetVC!.timeSheetView!.timesPeriod
                            self.timeSheetPickersView.didShow(inView: self.view)
                            
                            self.timeSheetPickersView.handlerConfirmButtonCompletion = { timesPeriod in
                                self.timesheetVC!.timeSheetView!.didChangeGestureMode(to: .ScheduleMove)
                                self.timesheetVC!.handlerTapGesture(UIGestureRecognizer())
//                                self.orderPeriod.TimesPeriod = timesPeriod as! TimesPeriod
                                self.timesLabelsDidUpload()
                            }
                            
                            // Handler change times in Pickers view
                            self.timeSheetPickersView.handlerChangeTimesPeriodCompletion = { timesPeriod in
//                                self.orderPeriod.timesPeriod = timesPeriod as! TimesPeriod
//                                self.timeSheetPickersView.timesPeriod = timesPeriod as! TimesPeriod
//                                self.timesheetVC!.timeSheetView!.setCurrentPeriod(timesPeriod as! TimesPeriod)
                            }
                        }
                    } else {
                        self.timesheetVC!.timeSheetView?.didChangeGestureMode(to: .ScheduleMove)
                        self.timeSheetPickersView.didHide()
                        self.timesLabelsDidUpload()
                    }
                }
            }
        }
    }
    
    func timesLabelsDidUpload() {
        // Upload dateLabel
        dateLabelDidUpload(fromDate: period.dateStart as Date)
        
        // Upload selected date
        calendarVC!.calendarView.selectDates([period.dateStart as Date], triggerSelectionDelegate: false, keepSelectionIfMultiSelectionAllowed: false)

        // Upload times text
        if (period.hourStart > 0 && period.hourEnd > 0) {
            var times = "\("From".localized()) \(String(period.hourStart).twoNumberFormat()):\(String(period.minuteStart).twoNumberFormat())"
            var stringAttributed = NSMutableAttributedString.init(string: times)
            var timeArray = times.components(separatedBy: " ")
            var location: Int = 0
            
            // From
            stringAttributed.addAttributes([ NSFontAttributeName: UIFont.ubuntuLightItalic12, NSForegroundColorAttributeName: UIColor.veryDarkGrayishBlue56 ],
                                           range: NSRange.init(location: location, length: timeArray[0].characters.count))
            
            location += timeArray[0].characters.count + 1
            
            // Start time
            stringAttributed.addAttributes([ NSFontAttributeName: UIFont.ubuntuLight16, NSForegroundColorAttributeName: UIColor.veryLightGray ],
                                           range: NSRange.init(location: location, length: timeArray[1].characters.count))
            
            self.fromTimeLabel.attributedText = stringAttributed
            location = 0
            times = "\("To".localized()) \(String(period.hourEnd).twoNumberFormat()):\(String(period.minuteEnd).twoNumberFormat())"
            timeArray = times.components(separatedBy: " ")
            
            // To
            stringAttributed = NSMutableAttributedString.init(string: times)
            
            stringAttributed.addAttributes([ NSFontAttributeName: UIFont.ubuntuLightItalic12, NSForegroundColorAttributeName: UIColor.veryDarkGrayishBlue56 ],
                                           range: NSRange.init(location: location, length: timeArray[0].characters.count))
            
            location += timeArray[0].characters.count + 1
            
            // End time
            stringAttributed.addAttributes([ NSFontAttributeName: UIFont.ubuntuLight16, NSForegroundColorAttributeName: UIColor.veryLightGray ],
                                           range: NSRange.init(location: location, length: timeArray[1].characters.count))
            
            self.toTimeLabel.attributedText = stringAttributed
            self.confirmButton.isEnabled = true
        }
    }
    
    // MARK: - Outlets
    @IBOutlet weak var segmentedControlView: SegmentedControlView!
    @IBOutlet weak var containerView: UIView!
    @IBOutlet weak var dateStackView: UIView!
    @IBOutlet weak var fromTimeLabel: UbuntuLightItalicVeryDarkGrayishBlueLabel!
    @IBOutlet weak var toTimeLabel: UbuntuLightItalicVeryDarkGrayishBlueLabel!
    
    @IBOutlet weak var containerLeadingConstraint: NSLayoutConstraint!
    @IBOutlet weak var containerTrailingConstraint: NSLayoutConstraint!
    
    @IBOutlet weak var confirmButton: FillColorButton! {
        didSet {
            confirmButton.isEnabled = false
        }
    }
    
    @IBOutlet weak var dateLabel: UbuntuLightVeryLightGrayLabel! {
        didSet {
            dateLabel.textAlignment = (UIApplication.shared.statusBarOrientation.isPortrait) ? .left : .center
        }
    }

    @IBOutlet weak var bottomDottedBorderView: DottedBorderView! {
        didSet {
            bottomDottedBorderView.style = .AroundDottedRectangle
        }
    }
    
    @IBOutlet var timeSheetPickersView: TimeSheetPickersView!    
    
    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        CalendarShowConfigurator.sharedInstance.configure(viewController: self)
    }
    
    
    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        calendarVC = UIStoryboard(name: "CalendarShow", bundle: nil).instantiateViewController(withIdentifier: "CalendarVC") as? CalendarViewController

        if (period.hourStart == 0 && period.hourEnd == 0) {
            dateStackView.isHidden = true
        }
        
        timesheetVC = UIStoryboard(name: "CalendarShow", bundle: nil).instantiateViewController(withIdentifier: "TimeSheetVC") as? TimeSheetViewController
        timesheetVC!.timeSheetID = "\(self.serviceID!)-\(Date().convertToString(withStyle: .DateHyphen))"

        activeViewController = calendarVC
        view.backgroundColor = UIColor.veryDarkDesaturatedBlue24
        
        dateDidSelect(period.dateStart as Date)
        
        setupScene(withSize: view.frame.size)
        setupSegmentedControlView()
        setupContainerView(withSize: view.frame.size)

        viewSettingsDidLoad()
        
        timeSheetPickersView.frameDidChange()
    }
    
    override func viewDidLayoutSubviews() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        setupContainerView(withSize: view.frame.size)
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        // NOTE: Ask the Interactor to do some work
        let request = CalendarShow.Something.Request()
        output.doSomething(request: request)
        
        timeSheetPickersView.didHide()
    }
    
    // Display logic
    func displaySomething(viewModel: CalendarShow.Something.ViewModel) {
        print(object: "\(type(of: self)): \(#function) run.")
        
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    func setupScene(withSize size: CGSize) {
        bottomDottedBorderView.setNeedsDisplay()
        segmentedControlView.setNeedsDisplay()
        containerView.setNeedsDisplay()
    }
    
    func dateLabelDidUpload(fromDate date: Date) {
        dateLabel.text = date.convertToString(withStyle: .DateDot)
    }
    
    func setupSegmentedControlView() {
        segmentedControlView.actionButtonHandlerCompletion = { sender in
            self.print(object: "\(type(of: self)): \(#function) run. Sender tag = \(sender.tag)")
            
            switch sender.tag {
            case 1:
                self.activeViewController = self.timesheetVC
                
            default:
                self.activeViewController = self.calendarVC
            }
        }
    }
    
    func setupContainerView(withSize size: CGSize) {
        if (Device.size() == .screen3_5Inch && size.width > size.height) {
            containerLeadingConstraint.constant = 0
            containerTrailingConstraint.constant = 10
            
            containerView.layoutIfNeeded()
        }
    }
    
    func dateDidSelect(_ date: Date) {
        self.dateStackView.isHidden = false
        self.dateLabelDidUpload(fromDate: date)
        
        // Change orderPeriod
        period.dateStart = date as NSDate
        period.dateEnd = date as NSDate
        
        // API "Get timesheet for one day"
        MSMRestApiManager.instance.userRequestDidRun(.userGetOrderTimeSheetForDay(["date": date.convertToString(withStyle: .DateHyphen), "service": self.serviceID], false), withHandlerResponseAPICompletion: { responseAPI in
            let timeSheetID = "\(self.serviceID!)-\(date.convertToString(withStyle: .DateHyphen))"
            
            if let timeSheet = CoreDataManager.instance.entityBy("TimeSheet", andCodeID: timeSheetID) as? TimeSheet {
                self.timesheetVC!.timeSheetID = timeSheetID
                
                if let jsonTimeSheet = responseAPI?.body as? [String: AnyObject] {
                    timeSheet.profileDidUpload(json: jsonTimeSheet, forService: self.serviceID, andDate: date.convertToString(withStyle: .DateHyphen))
                }
            }

            CoreDataManager.instance.didSaveContext()
        })
    }

    
            // Create TimeSheetItems for Organization work time
//                for index in 0...23 {
//                    let start = "\(String(index).twoNumberFormat()):00"
//                    let end = (index == 23) ? "\(String(index).twoNumberFormat()):59" : "\(String(index + 1).twoNumberFormat()):00"
//                    let itemCodeID = "\(timeSheet.codeID)-\(start)"
//                    let dateWithoutT = date.convertToString(withStyle: .DateHyphen)
//                    
//                    if let timeSheetItem = CoreDataManager.instance.entityBy("TimeSheetItem", andCodeID: itemCodeID) as? TimeSheetItem {
//                        let jsonTimeSheetItem: [String: AnyObject] =    [
//                            "start":    "\(dateWithoutT)T\(start)" as AnyObject,
//                            "end":      "\(dateWithoutT)T\(end)" as AnyObject,
//                            "type":     "FREE" as AnyObject
//                        ]
//                        
//                        timeSheetItem.profileDidUpload(json: jsonTimeSheetItem, andTimeSheet: timeSheet)
//                    }
//                }
//                
////                timeSheet.profileDidUpload(json: jsonTimeSheet, forService: self.serviceID, andDate: date.convertToString(withStyle: .DateHyphen))
//            }
            
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        setupScene(withSize: size)
        dateLabel.textAlignment = (size.height > size.width) ? .left : .center
        timeSheetPickersView.fromLabel.setNeedsDisplay()
    }

    // MARK: - Actions
    @IBAction func handlerConfirmButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        self.navigationController?.popViewController(animated: true)
        handlerConfirmButtonCompletion!()
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        self.navigationController?.popViewController(animated: true)
    }
}
