//
//  FavoriteServicesShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 28.03.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol FavoriteServicesShowPresenterInput {
    func favoriteServicesDidPrepareToShowLoad(fromResponseModel responseModel: FavoriteServicesShowModels.Services.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol FavoriteServicesShowPresenterOutput: class {
    func favoriteServicesDidShowLoad(fromViewModel viewModel: FavoriteServicesShowModels.Services.ViewModel)
}

class FavoriteServicesShowPresenter: FavoriteServicesShowPresenterInput {
    // MARK: - Properties
    weak var viewController: FavoriteServicesShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func favoriteServicesDidPrepareToShowLoad(fromResponseModel responseModel: FavoriteServicesShowModels.Services.ResponseModel) {
        guard responseModel.response != nil else {
            let servicesViewModel = FavoriteServicesShowModels.Services.ViewModel(services: nil)
            viewController.favoriteServicesDidShowLoad(fromViewModel: servicesViewModel)
            
            return
        }
        
        // Format the response from the Interactor and pass the result back to the View Controller
        if ((responseModel.response?.body as! [Any]).count > 0) {
            responseModel.response?.servicesAddressDidLoad(responseModel.response?.body as! [Any], completion: { favoriteServices in
                // Prepare to save Services in CoreData
                let _ = favoriteServices.map { $0.cellHeight = 60.0; $0.cellIdentifier = "FavoriteServiceTableViewCell" }
                let entityFavoriteServices = CoreDataManager.instance.entityDidLoad(byName: keyFavoriteServices) as! FavoriteServices
                let favoriteServicesData = NSKeyedArchiver.archivedData(withRootObject: favoriteServices) as NSData?
                entityFavoriteServices.list = favoriteServicesData!
                
                let servicesViewModel = FavoriteServicesShowModels.Services.ViewModel(services: favoriteServices)
                self.viewController.favoriteServicesDidShowLoad(fromViewModel: servicesViewModel)
            })
        } else {
            let servicesViewModel = FavoriteServicesShowModels.Services.ViewModel(services: nil)
            viewController.favoriteServicesDidShowLoad(fromViewModel: servicesViewModel)
        }
    }
}
