//
//  OrganizationsMapShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationsMapShowViewControllerInput {
    func didShowLocations(fromViewModel viewModel: OrganizationsMapShowModels.Locations.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationsMapShowViewControllerOutput {
    func didLoadLocations(withRequestModel requestModel: OrganizationsMapShowModels.Locations.RequestModel)
    func didStopUpdateLocations(withRequestModel requestModel: OrganizationsMapShowModels.Locations.RequestModel)
}

class OrganizationsMapShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationsMapShowViewControllerOutput!
    var router: OrganizationsMapShowRouter!
    
    var organizations = Array<Organization>()

    private let locationManager = LocationManager()
    var pinAnnotationView: MKPinAnnotationView!

    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var spinner: UIActivityIndicatorView!

    @IBOutlet weak var mapView: MKMapView! {
        didSet {
            // Delegates
            mapView.delegate = self
        }
    }
    

    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationsMapShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        smallTopBarView.type    =   "ChildSearch"
        topBarViewStyle         =   .Small
        setup(topBarView: smallTopBarView)

        viewSettingsDidLoad()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        // Stop GeoLocation manager
        let locationsRequestModel = OrganizationsMapShowModels.Locations.RequestModel(locationManager: locationManager, organizations: organizations)
        interactor.didStopUpdateLocations(withRequestModel: locationsRequestModel)
        
        super.viewDidDisappear(true)
    }


    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }

        // Customize map view
        mapView.showsScale      =   false
        mapView.showsCompass    =   true
        
        // Start GeoLocation manager with current user position
        didStartGeocoding()
    }
    
    // Geocoding
    func didStartGeocoding() {
        spinner.startAnimating()
        
        let requestModel = OrganizationsMapShowModels.Locations.RequestModel(locationManager: locationManager, organizations: organizations)
        interactor.didLoadLocations(withRequestModel: requestModel)
    }
    
    // Centering map
    func didShowLocationOnMapViewCenter(coordinate: CLLocationCoordinate2D?) {
        guard let regionCoordinate = coordinate else {
            return
        }
        
        mapView.setRegion(MKCoordinateRegionMake(regionCoordinate, MKCoordinateSpanMake(0.003, 0.003)), animated: true)
    }
    
    func didAddAnnotation(placemark: CLPlacemark?) {
        guard placemark != nil else {
            return
        }
        
        mapView.addAnnotations(mapView.selectedAnnotations)
        
//        mapView.showAnnotations([pointAnnotation], animated: true)
//        mapView.selectAnnotation(pointAnnotation, animated: true)
//        didShowLocationOnMapViewCenter(coordinate: placemark?.location?.coordinate)
//        
//        if (pointAnnotation.isRegionChange) {
//            spinner.stopAnimating()
//            pointAnnotation.isRegionChange = false
//        }
    }

}


// MARK: - OrganizationsMapShowViewControllerInput
extension OrganizationsMapShowViewController: OrganizationsMapShowViewControllerInput {
    func didShowLocations(fromViewModel viewModel: OrganizationsMapShowModels.Locations.ViewModel) {
//        self.pointAnnotation.didUpdate(fromViewModel: viewModel.locations!)
//        didAddAnnotation(placemark: viewModel.locations?.placemark)
    }
    
    func didDismissViewController(fromViewModel viewModel: OrganizationsMapShowModels.Locations.ViewModel) {
        mapView.showsUserLocation = false
    }
}


// MARK: - MKMapViewDelegate
extension OrganizationsMapShowViewController: MKMapViewDelegate {
    func mapViewDidFinishRenderingMap(_ mapView: MKMapView, fullyRendered: Bool) {
        if (fullyRendered) {
            spinner.stopAnimating()
        }
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let identifier = "pin" //"CustomPin"
        pinAnnotationView = mapView.dequeueReusableAnnotationView(withIdentifier: identifier) as? MKPinAnnotationView
        
        if (pinAnnotationView != nil) {
            pinAnnotationView?.annotation   =   annotation
        } else {
            pinAnnotationView               =   MKPinAnnotationView(annotation: annotation, reuseIdentifier: identifier)
            pinAnnotationView.pinTintColor  =   UIColor.init(hexString: "#009395", withAlpha: 1.0)
        }
        
        pinAnnotationView?.canShowCallout   =   false
        pinAnnotationView?.isDraggable      =   true
        
        // Add organization image
        let leftIconView = UIImageView(frame: CGRect.init(x: 0, y: 0, width: 44, height: 33))
        
//        guard let avatar = pointAnnotation.image else {
//            leftIconView.image = UIImage(named: "icon-empty-organization-normal")
//            leftIconView.backgroundColor = UIColor.veryLightGray
//            pinAnnotationView?.leftCalloutAccessoryView = leftIconView
//            
//            return pinAnnotationView
//        }
        
//        leftIconView.image = avatar
        pinAnnotationView?.leftCalloutAccessoryView = leftIconView
        
        return pinAnnotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        view.canShowCallout = true
    }
}

