//
//  OrganizationsMapShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import MapKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationsMapShowViewControllerInput {
    func pointAnnotationsDidShow(fromViewModel viewModel: OrganizationsMapShowModels.PointAnnotations.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationsMapShowViewControllerOutput {
    func pointAnnotationsDidLoad(withRequestModel requestModel: OrganizationsMapShowModels.PointAnnotations.RequestModel)
}

class OrganizationsMapShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationsMapShowViewControllerOutput!
    var router: OrganizationsMapShowRouter!
    
    var organizations               =   [Organization]()
    var pointAnnotations            =   [PointAnnotation]()
    var regionRect                  =   MKMapRect()

    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var spinner: UIActivityIndicatorView!

    @IBOutlet weak var mapView: MKMapView! {
        didSet {
            // Delegates
            mapView.delegate = self
        }
    }
    

    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationsMapShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        spinner.startAnimating()
        
        smallTopBarView.type    =   "ChildSearch"
        topBarViewStyle         =   .Small
        setup(topBarView: smallTopBarView)

        viewSettingsDidLoad()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
    }


    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }

        // Customize map view
        mapView.showsScale      =   false
        mapView.showsCompass    =   true
        
        // Load point annotations
        let requestModel = OrganizationsMapShowModels.PointAnnotations.RequestModel(organizations: organizations)
        interactor.pointAnnotationsDidLoad(withRequestModel: requestModel)
    }
    
    func mapViewDidAddPointAnnotations() {
        mapView.addAnnotations(pointAnnotations)
        mapView.showAnnotations(pointAnnotations, animated: true)

        regionRect              =   mapView.mapRectThatFits(regionRect, edgePadding: UIEdgeInsetsMake(50, 50, 50, 50))

        mapView.setVisibleMapRect(regionRect, animated: true)
    }
}


// MARK: - OrganizationsMapShowViewControllerInput
extension OrganizationsMapShowViewController: OrganizationsMapShowViewControllerInput {
    func pointAnnotationsDidShow(fromViewModel viewModel: OrganizationsMapShowModels.PointAnnotations.ViewModel) {
        self.pointAnnotations   =   viewModel.pointAnnotations
        self.regionRect         =   viewModel.regionRect
        
        self.mapViewDidAddPointAnnotations()
    }
}


// MARK: - MKMapViewDelegate
extension OrganizationsMapShowViewController: MKMapViewDelegate {
    func mapViewDidFinishRenderingMap(_ mapView: MKMapView, fullyRendered: Bool) {
        if (fullyRendered) {
            UIApplication.shared.isNetworkActivityIndicatorVisible = false
            spinner.stopAnimating()
        }
    }
    
    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
        let pinIdentifier                   =   "Pin"
        var pinAnnotationView               =   mapView.dequeueReusableAnnotationView(withIdentifier: pinIdentifier) as? MKPinAnnotationView
        
        if (pinAnnotationView != nil) {
            pinAnnotationView!.annotation   =   annotation
        } else {
            pinAnnotationView               =   MKPinAnnotationView(annotation: annotation, reuseIdentifier: pinIdentifier)
            pinAnnotationView!.pinTintColor =   UIColor.init(hexString: "#009395", withAlpha: 1.0)
        }
        
        pinAnnotationView!.canShowCallout   =   false
        pinAnnotationView!.isDraggable      =   true
        
        // Add organization image
        let leftIconView = UIImageView(frame: CGRect.init(x: 0, y: 0, width: 44, height: 33))
        
        guard let avatar                                    =   (annotation as! PointAnnotation).image else {
            leftIconView.image                              =   UIImage(named: "icon-empty-organization-normal")
            leftIconView.backgroundColor                    =   UIColor.veryLightGray
            pinAnnotationView?.leftCalloutAccessoryView     =   leftIconView
            
            return pinAnnotationView
        }
        
        leftIconView.image = avatar
        pinAnnotationView!.leftCalloutAccessoryView = leftIconView
        
        return pinAnnotationView
    }
    
    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {
        view.canShowCallout = true
    }
}

