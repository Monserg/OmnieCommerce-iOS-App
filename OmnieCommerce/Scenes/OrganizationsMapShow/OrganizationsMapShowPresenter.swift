//
//  OrganizationsMapShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 23.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationsMapShowPresenterInput {
    func didPrepareToShowLocations(fromResponseModel responseModel: OrganizationsMapShowModels.Locations.ResponseModel)
    func didPrepareToDismissViewController(fromResponseModel responseModel: OrganizationsMapShowModels.Locations.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationsMapShowPresenterOutput: class {
    func didShowLocations(fromViewModel viewModel: OrganizationsMapShowModels.Locations.ViewModel)
    func didDismissViewController(fromViewModel viewModel: OrganizationsMapShowModels.Locations.ViewModel)
}

class OrganizationsMapShowPresenter: OrganizationsMapShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationsMapShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func didPrepareToShowLocations(fromResponseModel responseModel: OrganizationsMapShowModels.Locations.ResponseModel) {
        var locations = [ResultLocation]()
        
        for placemark in responseModel.placemarks! {
            var placeString = String()
            
            if let lines: Array<String> = placemark.addressDictionary?["FormattedAddressLines"] as? Array<String> {
                placeString = lines.joined(separator: ", ")
            }
            
            let resultLocation = ResultLocation(placemark, placemark.location?.coordinate, placeString)
            
            locations.append(resultLocation)
        }
        

        let viewModel = OrganizationsMapShowModels.Locations.ViewModel(resultLocations: locations)
        viewController.didShowLocations(fromViewModel: viewModel)
    }
    
    func didPrepareToDismissViewController(fromResponseModel responseModel: OrganizationsMapShowModels.Locations.ResponseModel) {
        let viewModel = OrganizationsMapShowModels.Locations.ViewModel(resultLocations: nil)
        viewController.didDismissViewController(fromViewModel: viewModel)
    }
}
