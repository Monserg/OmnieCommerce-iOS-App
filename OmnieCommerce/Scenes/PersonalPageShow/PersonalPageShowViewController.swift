//
//  PersonalPageShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 15.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol PersonalPageShowViewControllerInput {
    func displaySomething(viewModel: PersonalPageShow.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol PersonalPageShowViewControllerOutput {
    func doSomething(request: PersonalPageShow.Something.RequestModel)
}

class PersonalPageShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: PersonalPageShowViewControllerOutput!
    var router: PersonalPageShowRouter!

    // Container childVC
    var animationDirection: AnimationDirection?
    var personalDataVC: PersonalDataViewController?
    var personalTemplatesVC: PersonalTemplatesViewController?

    var activeViewController: BaseViewController? {
        didSet {
            guard oldValue != nil else {
                router.updateActiveViewController()
                
                return
            }
            
            animationDirection = ((oldValue?.view.tag)! < (activeViewController?.view.tag)!) ? .FromRightToLeft : .FromLeftToRight
            router.removeInactiveViewController(inactiveViewController: oldValue)
        }
    }
    
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var copyrightLabel: CustomLabel!
    @IBOutlet weak var segmentedControlView: SegmentedControlView!
    @IBOutlet weak var containerView: CustomView!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        PersonalPageShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Config topBarView
        smallTopBarView.type    =   "Parent"
        topBarViewStyle         =   .Small
        setup(topBarView: smallTopBarView)
        
        // Container Child Views
        personalDataVC          =   UIStoryboard(name: "PersonalPageShow", bundle: nil).instantiateViewController(withIdentifier: "PersonalDataVC") as? PersonalDataViewController
        personalTemplatesVC     =   UIStoryboard(name: "PersonalPageShow", bundle: nil).instantiateViewController(withIdentifier: "PersonalTemplatesVC") as? PersonalTemplatesViewController
        
        activeViewController    =   personalDataVC
//        view.backgroundColor    =   UIColor.veryDarkDesaturatedBlue24

        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        setupSegmentedControlView()
        containerView.autoresizesSubviews = true

        // NOTE: Ask the Interactor to do some work
        let request             =   PersonalPageShow.Something.RequestModel()
        interactor.doSomething(request: request)
    }
    
    func setupSegmentedControlView() {
        segmentedControlView.actionButtonHandlerCompletion = { sender in
            self.print(object: "\(type(of: self)): \(#function) run. Sender tag = \(sender.tag)")
            
            switch sender.tag {
            case 1:
                self.activeViewController   =   self.personalTemplatesVC
                
            default:
                self.activeViewController   =   self.personalDataVC
            }
        }
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
        segmentedControlView.setNeedsDisplay()
        
        
        // Container Child views
//        containerView.setNeedsDisplay()
//        personalDataVC?.view.frame          =   CGRect.init(origin: CGPoint.zero, size: containerView.frame.size)
//        personalTemplatesVC?.view.frame     =   CGRect.init(origin: CGPoint.zero, size: containerView.frame.size)
    }
}


// MARK: - PersonalPageShowViewControllerInput
extension PersonalPageShowViewController: PersonalPageShowViewControllerInput {
    func displaySomething(viewModel: PersonalPageShow.Something.ViewModel) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }

        print(object: "\(type(of: self)): \(#function) run.")
        
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}
