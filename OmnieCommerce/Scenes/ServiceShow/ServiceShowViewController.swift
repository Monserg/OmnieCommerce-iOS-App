//
//  ServiceShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 24.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol ServiceShowViewControllerInput {
    func serviceDidShowLoad(fromViewModel viewModel: ServiceShowModels.ServiceItem.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol ServiceShowViewControllerOutput {
    func serviceDidLoad(withRequestModel requestModel: ServiceShowModels.ServiceItem.RequestModel)
}

class ServiceShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: ServiceShowViewControllerOutput!
    var router: ServiceShowRouter!
    
    var service: Service!
    var wasLaunchedAPI = false

    // Outlets
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var mainStackView: UIStackView!
    @IBOutlet var modalView: ModalView?

    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map { $0.style = .BottomDottedLine }
        }
    }
    
    // Title view
    @IBOutlet weak var titleView: UIView!
    @IBOutlet weak var favoriteButton: CustomButton!
    @IBOutlet weak var titleLabel: UbuntuLightVeryLightOrangeLabel!
    @IBOutlet weak var titleViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var titleTableViewHeightConstraint: NSLayoutConstraint!

    @IBOutlet weak var contentLabel: UbuntuLightVeryLightGrayLabel! {
        didSet {
            contentLabel.numberOfLines = 0
        }
    }
    
    @IBOutlet weak var titleTableView: MSMTableView! {
        didSet {
            titleTableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0)
        }
    }

    // Discounts view
    @IBOutlet weak var discountsView: UIView!
    @IBOutlet weak var discountCommonStackView: UIStackView!
    
    @IBOutlet weak var discountsViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var discountCommonTableViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var discountsUserTableViewHeightConstraint: NSLayoutConstraint!
    
    @IBOutlet weak var discountsCommonTableView: MSMTableView! {
        didSet {
            discountsCommonTableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0)
            discountsCommonTableView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, 0)
        }
    }
    
    @IBOutlet weak var discountUserStackView: UIStackView!
    
    @IBOutlet weak var discountsUserTableView: MSMTableView!  {
        didSet {
            discountsUserTableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0)
            discountsUserTableView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, 0)
        }
    }

    // Gallery view
    @IBOutlet weak var galleryView: UIView!
    @IBOutlet weak var galleryCollectionView: MSMCollectionView!

    
    
    
    
    
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        ServiceShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        if (blackoutView != nil) {
            modalView?.center = blackoutView!.center
        }
        
//        guard let flowLayout = reviewsCollectionView.collectionViewLayout as? UICollectionViewFlowLayout else {
//            return
//        }
//        
//        flowLayout.itemSize = reviewsCollectionView.frame.size
//        flowLayout.invalidateLayout()
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Child"
        smallTopBarView.titleText = service.organizationName!
        haveMenuItem = false
        
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
        
        spinnerDidStart(view)
        wasLaunchedAPI = true
        
        guard isNetworkAvailable else {
            serviceProfileDidShow()
            return
        }
        
        // Load Service profile data
        let serviceRequestModel = ServiceShowModels.ServiceItem.RequestModel(parameters: ["id": service.codeID])
        interactor.serviceDidLoad(withRequestModel: serviceRequestModel)
    }
    
    func serviceProfileDidShow() {
        // Setting Service profile info
        let serviceProfile = CoreDataManager.instance.entityDidLoad(byName: "Service", andPredicateParameter: service.codeID) as! Service
        
        // Title view
        if let contentDescription = serviceProfile.descriptionContent, contentDescription.isEmpty {
            titleView.isHidden = true
        } else {
            titleView.isHidden = false
            
            titleLabel.text = serviceProfile.name
            contentLabel.text = serviceProfile.descriptionContent!
            contentLabel.sizeToFit()
            
            favoriteButton.tag = (service.isFavorite) ? 1 : 0
            favoriteButton.setImage(UIImage.init(named: (favoriteButton.tag == 0) ? "image-favorite-star-normal" : "image-favorite-star-selected"), for: .normal)

            if ((serviceProfile.prices?.count)! > 0) {
                let titleTableManager = MSMTableViewControllerManager.init(withTableView: titleTableView,
                                                                           andSectionsCount: 1,
                                                                           andEmptyMessageText: "Service prices list is empty")
                
                titleTableView.tableViewControllerManager = titleTableManager
                titleTableView.tableViewControllerManager!.dataSource = Array(serviceProfile.prices!)
                titleTableView.tableFooterView!.isHidden = true
                titleTableViewHeightConstraint.constant = CGFloat(20.0 * Double(serviceProfile.prices!.count)) * view.heightRatio
                titleTableView.layoutIfNeeded()

                titleTableView.reloadData()
            }
            
            view.setNeedsLayout()
        }

        // Discounts view
        if let discounts = serviceProfile.discounts, discounts.count > 0 {
            // Show/Hide Common discounts
            let discountsCommon = CoreDataManager.instance.entitiesDidLoad(byName: "Discount", andPredicateParameter: ["isUserDiscount": false])
            
            if (discountsCommon!.count > 0) {
                discountCommonStackView.isHidden = false
                
                let discountCommonTableManager = MSMTableViewControllerManager.init(withTableView: discountsCommonTableView,
                                                                                    andSectionsCount: 1,
                                                                                    andEmptyMessageText: "Common discounts list is empty")
                
                discountsCommonTableView.tableViewControllerManager = discountCommonTableManager
                discountsCommonTableView.tableViewControllerManager!.dataSource = discountsCommon!
                discountsCommonTableView.tableFooterView!.isHidden = true
                discountCommonTableViewHeightConstraint.constant = CGFloat(50.0 + 50.0 * Double(discountsCommon!.count)) * view.heightRatio
                
                discountsCommonTableView.reloadData()
            } else {
                discountCommonStackView.isHidden = true
            }
            
            // Show/Hide User discounts
            let discountsUser = CoreDataManager.instance.entitiesDidLoad(byName: "Discount", andPredicateParameter: ["isUserDiscount": true])
            
            if (discountsUser!.count > 0) {
                discountUserStackView.isHidden = false
                
                let discountsUserTableManager = MSMTableViewControllerManager.init(withTableView: discountsUserTableView,
                                                                                   andSectionsCount: 1,
                                                                                   andEmptyMessageText: "User discounts list is empty")
                
                discountsUserTableView.tableViewControllerManager = discountsUserTableManager
                discountsUserTableView.tableViewControllerManager!.dataSource = discountsUser!
                discountsUserTableView.tableFooterView!.isHidden = true
                discountsUserTableViewHeightConstraint.constant = CGFloat(61.0 + 50.0 * Double(discountsUser!.count)) * view.heightRatio
                
                discountsUserTableView.reloadData()
            } else {
                discountUserStackView.isHidden = true
            }
            
            discountsViewHeightConstraint.constant = discountCommonTableViewHeightConstraint.constant + discountsUserTableViewHeightConstraint.constant
            self.discountsView.layoutIfNeeded()
        } else {
            discountsView.isHidden = true
        }

        // Gallery view
        if let images = serviceProfile.images, images.count > 0 {
            galleryView.isHidden = false
            
            let galleryManager = MSMCollectionViewControllerManager(withCollectionView: galleryCollectionView)
            galleryCollectionView.collectionViewControllerManager = galleryManager
            galleryCollectionView.collectionViewControllerManager!.sectionsCount = 1
            _ = serviceProfile.images!.map { ($0 as! GalleryImage).cellHeight = 102.0 }
            galleryCollectionView.collectionViewControllerManager!.dataSource = Array(serviceProfile.images!)
            galleryCollectionView.reloadData()
            
            // Handler Image select
            galleryCollectionView.collectionViewControllerManager!.handlerCellSelectCompletion = { item in
                if item is GalleryImage {
                    self.modalViewDidShow(withHeight: 365, customSubview: PhotosGalleryView(), andValues: Array(serviceProfile.images!))
                }
            }
        } else {
            galleryView.isHidden = true
        }

        
        
        smallTopBarView.actionButton.isHidden = false

        _ = dottedBorderViewsCollection.map { $0.setNeedsDisplay() }
        
        UIView.animate(withDuration: 0.3, animations: { _ in
            self.mainStackView.isHidden = false
        })
        
        spinnerDidFinish()
    }
    
    func modalViewDidShow(withHeight height: CGFloat, customSubview subView: CustomView, andValues values: [Any]?) {
        var popupView = subView
        
        if (blackoutView == nil) {
            blackoutView = MSMBlackoutView.init(inView: view)
            blackoutView!.didShow()
        }
        
        modalView = ModalView.init(inView: blackoutView!, withHeight: height)
        
        switch subView {
        case subView as PhotosGalleryView:
            popupView = PhotosGalleryView.init(inView: modalView!)
            popupView.values = (values as! [GalleryImage]).filter({ $0.imagePath != nil })
            
        default:
            break
        }
        
        
        // Handler Cancel button tap
        popupView.handlerCancelButtonCompletion = { _ in
            self.blackoutView!.didHide()
            self.blackoutView = nil
            
            if ((popupView as? PhotosGalleryView) != nil) {
                _ = self.service.images!.map { ($0 as! GalleryImage).cellHeight = 102.0 }
            }
        }
    }

    
    // MARK: - Transition
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        _ = dottedBorderViewsCollection.map { $0.setNeedsDisplay() }
        smallTopBarView.setNeedsDisplay()
//        galleryCollectionView.reloadData()
//        
//        // Album
//        if newCollection.verticalSizeClass == .compact {
//            scrollViewTopConstraint.constant = smallTopBarView.frame.height + 20.0 - 50.0
//        } else {
//            scrollViewTopConstraint.constant = smallTopBarView.frame.height + 20.0 - 30.0
//        }
//        
//        self.view.layoutIfNeeded()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerFavoriteButtonTap(_ sender: UIButton) {
        guard isNetworkAvailable else {
            return
        }
        
        sender.tag = (sender.tag == 0) ? 1 : 0
        service.isFavorite = !service.isFavorite
        sender.setImage(UIImage.init(named: (sender.tag == 0) ? "image-favorite-star-normal" : "image-favorite-star-selected"), for: .normal)
        
        MSMRestApiManager.instance.userRequestDidRun(.userAddRemoveServiceToFavorite(["service": service.codeID], true), withHandlerResponseAPICompletion: { responseAPI in
            if (responseAPI?.code == 200) {
                self.favoriteButton.setImage((self.service.isFavorite) ?    UIImage(named: "image-favorite-star-selected") :
                                                                            UIImage(named: "image-favorite-star-normal"), for: .normal)
            }
        })
    }

}


// MARK: - ServiceShowViewControllerInput
extension ServiceShowViewController: ServiceShowViewControllerInput {
    func serviceDidShowLoad(fromViewModel viewModel: ServiceShowModels.ServiceItem.ViewModel) {
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: {
                self.serviceProfileDidShow()
            })
            
            return
        }
        
        self.serviceProfileDidShow()
    }
}
