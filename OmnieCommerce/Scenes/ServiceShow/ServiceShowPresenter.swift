//
//  ServiceShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 24.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol ServiceShowPresenterInput {
    func serviceDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel)
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.OrderItem.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol ServiceShowPresenterOutput: class {
    func serviceDidShowLoad(fromViewModel viewModel: ServiceShowModels.ServiceItem.ViewModel)
    func orderDidShowLoad(fromViewModel viewModel: ServiceShowModels.OrderItem.ViewModel)
}

class ServiceShowPresenter: ServiceShowPresenterInput {
    // MARK: - Properties
    weak var viewController: ServiceShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func serviceDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: (responseModel.responseAPI?.status)!)
            viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
            
            return
        }
        
        // Convert responseAPI body to Service CoreData object
        let service = Service.init(json: responseModel.responseAPI?.body as! [String: AnyObject], forOrganization: nil, forList: keyService)
        
        if let pricesList = service?.prices, pricesList.count > 0 {
            let pricesArray = Array(pricesList)
            _ = pricesArray.map({ ($0 as! Price).cellHeight = 20.0; ($0 as! Price).cellIdentifier = "PriceServiceTableViewCell" })
            service!.prices = NSSet.init(array: pricesArray)
        }

        if let placeID = service!.placeID {
            service!.googlePlaceDidLoad(positionID: placeID, completion: { _ in
                CoreDataManager.instance.didSaveContext()
                
                let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: responseModel.responseAPI!.status)
                self.viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
            })
        }
    }
    
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.OrderItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let orderViewModel = ServiceShowModels.OrderItem.ViewModel(status: (responseModel.responseAPI?.status)!, orderID: nil)
            viewController.orderDidShowLoad(fromViewModel: orderViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
        let order = Order.init(json: responseModel.responseAPI?.body as! [String: AnyObject], forLists: keyOrder)
        let orderID = order!.codeID
        CoreDataManager.instance.didSaveContext()
        
        let orderViewModel = ServiceShowModels.OrderItem.ViewModel(status: responseModel.responseAPI!.status, orderID: orderID)
        self.viewController.orderDidShowLoad(fromViewModel: orderViewModel)
    }
}
