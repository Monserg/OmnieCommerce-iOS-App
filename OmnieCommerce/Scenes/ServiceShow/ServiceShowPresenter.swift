//
//  ServiceShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 24.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol ServiceShowPresenterInput {
    func serviceDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel)
    func serviceReviewDidPrepareToShowSend(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol ServiceShowPresenterOutput: class {
    func serviceDidShowLoad(fromViewModel viewModel: ServiceShowModels.ServiceItem.ViewModel)
    func serviceReviewDidShowSend(fromViewModel viewModel: ServiceShowModels.ServiceItem.ViewModel)
}

class ServiceShowPresenter: ServiceShowPresenterInput {
    // MARK: - Properties
    weak var viewController: ServiceShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func serviceDidPrepareToShowLoad(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: "RESPONSE_NIL")
            viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
            
            return
        }
        
        // Convert responseAPI body to Service CoreData object
        let service = CoreDataManager.instance.entityBy("Service", andCodeID: responseModel.parameters["id"] as! String) as! Service
        
        if let jsonService = responseModel.responseAPI?.body {
            service.profileDidUpload(json: jsonService as! [String: AnyObject], forList: keyService, withOrganizationID: responseModel.organizationID)
        }
        
        if let pricesList = service.prices, pricesList.count > 0 {
            let pricesArray = Array(pricesList)
            _ = pricesArray.map({ ($0 as! Price).cellHeight = 20.0; ($0 as! Price).cellIdentifier = "PriceServiceTableViewCell" })
            
            service.prices = NSSet.init(array: pricesArray)
        }

        if let placeID = service.placeID {
            service.googlePlaceDidLoad(positionID: placeID, completion: { _ in
                CoreDataManager.instance.didSaveContext()
                
                let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: responseModel.responseAPI!.status)
                self.viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
            })
        } else {
            let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: responseModel.responseAPI!.status)
            self.viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
        }
    }
    
    func serviceReviewDidPrepareToShowSend(fromResponseModel responseModel: ServiceShowModels.ServiceItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let serviceReviewViewModel = ServiceShowModels.ServiceItem.ViewModel(status: "RESPONSE_NIL")
            viewController.serviceReviewDidShowSend(fromViewModel: serviceReviewViewModel)
            
            return
        }

        let serviceReviewViewModel = ServiceShowModels.ServiceItem.ViewModel(status: responseModel.responseAPI!.status)
        self.viewController.serviceReviewDidShowSend(fromViewModel: serviceReviewViewModel)
    }
}
