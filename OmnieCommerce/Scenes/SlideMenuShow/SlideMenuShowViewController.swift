//
//  SlideMenuShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol SlideMenuShowViewControllerInput {
    func displaySomething(viewModel: SlideMenuShow.Something.ViewModel)
}

protocol SlideMenuShowViewControllerOutput {
    func doSomething(request: SlideMenuShow.Something.Request)
}

class SlideMenuShowViewController: UIViewController, SlideMenuShowViewControllerInput {
    // MARK: - Properties
    var output: SlideMenuShowViewControllerOutput!
    var router: SlideMenuShowRouter!
    
    var menuItemsList = NSDictionary()
    
    @IBOutlet weak var tableView: UITableView!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SlideMenuShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Delegates
        self.tableView.dataSource = self
        self.tableView.delegate = self
        
        doSomethingOnLoad()
        
        // FIXME: - REMOVE TO WORKER
        getMenuItemsFromPropertyList()
    }

    deinit {
        print("SlideMenuShowViewController deinit.")
    }

    // MARK: - Custom Functions
    func doSomethingOnLoad() {
        // NOTE: Ask the Interactor to do some work
        let request = SlideMenuShow.Something.Request()
        output.doSomething(request: request)
    }
    
    // Display logic
    func displaySomething(viewModel: SlideMenuShow.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    func getMenuItemsFromPropertyList() {
        let path = Bundle.main.path(forResource: "MenuItemsList", ofType: "plist")
        menuItemsList = NSDictionary(contentsOfFile: path!)!
        
        tableView.reloadData()
    }
}


// MARK: - UITableViewDataSource
extension SlideMenuShowViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return menuItemsList.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let sectionArray = menuItemsList.object(forKey: "Section \(section)") as! NSArray
        
        return sectionArray.count
        /*
        switch section {
        case 0:
            return 5
            
        case 1:
            return 4

        case 2:
            return 3

        // OmnieSoft
        case 3:
            return 1

        // Logout
        case 4:
            return 1

        default:
            return 1
        }
 */
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "MenuCell", for: indexPath) as! MenuViewCell
        
        print(indexPath)
        let sectionArray = menuItemsList.object(forKey: "Section \(indexPath.section)") as! NSArray
        let sectionDictionary = sectionArray[indexPath.row] as! NSDictionary
        
        cell.titleLabel.text = (sectionDictionary.object(forKey: "name") as! String)
        
        return cell
    }
}


// MARK: - UITableViewDelegate
extension SlideMenuShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)

        // Menu section 0
        if indexPath.section == 0 {
            switch indexPath.row {
            case 0:
                let ordersNC = UIStoryboard(name: "OrdersShow", bundle: nil).instantiateViewController(withIdentifier: "OrdersShowNC") as! BaseNavigationController
                revealViewController().pushFrontViewController(ordersNC.viewControllers.first, animated: true)
                
            case 1:
                self.performSegue(withIdentifier: "MessagesShowSegue", sender: self)
                
            case 2:
                self.performSegue(withIdentifier: "FavoriteShowSegue", sender: self)
                
            case 3:
                self.performSegue(withIdentifier: "CategoriesShowSegue", sender: self)
                
            case 4:
                self.performSegue(withIdentifier: "NewsShowSegue", sender: self)
                
            default:
                self.performSegue(withIdentifier: "OrdersShowSegue", sender: self)
            }
        }
        
        // Menu section 1
        else if indexPath.section == 1 {
            
        }
        
        // Menu section 2
        else if indexPath.section == 2 {
            
        }
        
        // Menu section 3 (OmnieSoft)
        else if indexPath.section == 3 {
            
        }
            
        // Menu section 4 (Logout)
        else if indexPath.section == 4 {
            self.revealViewController().revealToggle(animated: true)
            
            let window = UIApplication.shared.windows[0]
            let signInShowStoryboard = UIStoryboard(name: "SignInShow", bundle: nil)
            let initialNC = signInShowStoryboard.instantiateViewController(withIdentifier: "SignInShowNC") as! BaseNavigationController
            window.rootViewController = initialNC
            
            self.present(initialNC, animated: true, completion: {
                self.navigationController?.popToRootViewController(animated: true)
//                self.revealViewController().dismiss(animated: true, completion: nil)
            })
            //window.makeKeyAndVisible()
        }
    }
}
