//
//  SlideMenuShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftyVK

// MARK: - Input & Output protocols
protocol SlideMenuShowViewControllerInput {
    func displaySomething(viewModel: SlideMenuShow.Something.ViewModel)
}

protocol SlideMenuShowViewControllerOutput {
    func doSomething(request: SlideMenuShow.Something.Request)
}

class SlideMenuShowViewController: UIViewController, SlideMenuShowViewControllerInput {
    // MARK: - Properties
    var output: SlideMenuShowViewControllerOutput!
    var router: SlideMenuShowRouter!
    let socialVK = SocialVK()

//    let viewTransitionDelegate = TransitionDelegate()

    var menuItemsList = NSDictionary()
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var advertisingView: UIView!
    @IBOutlet weak var textButton: UIButton!
    

    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SlideMenuShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Delegates
        self.tableView.dataSource = self
        self.tableView.delegate = self
        
        // Config VC
        textButton.setAttributedTitle(NSAttributedString(string: "Add organization name".localized(), attributes: UIFont.ubuntuRegularVeryLightOrangeUnderline12), for: .normal)
        
        // Register the Nib header/footer section views
        tableView.register(UINib(nibName: "MenuSectionHeaderView", bundle: nil), forHeaderFooterViewReuseIdentifier: "MenuSectionHeaderView")
        tableView.register(UINib(nibName: "MenuSectionFooterView", bundle: nil), forHeaderFooterViewReuseIdentifier: "MenuSectionFooterView")
        
        doSomethingOnLoad()
        
        // FIXME: - REMOVE TO WORKER
        getMenuItemsFromPropertyList()
    }

    
    // MARK: - Actions
    @IBAction func handlerAdvertisingViewTap(_ sender: UIButton) {
    }
    
    
    // MARK: - Custom Functions
    func doSomethingOnLoad() {
        // NOTE: Ask the Interactor to do some work
        let request = SlideMenuShow.Something.Request()
        output.doSomething(request: request)
    }
    
    // Display logic
    func displaySomething(viewModel: SlideMenuShow.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    func getMenuItemsFromPropertyList() {
        let path = Bundle.main.path(forResource: "MenuItemsList", ofType: "plist")
        menuItemsList = NSDictionary(contentsOfFile: path!)!
        
        tableView.reloadData()
    }
}


// MARK: - UITableViewDataSource
extension SlideMenuShowViewController: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return menuItemsList.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let sectionArray = menuItemsList.object(forKey: "Section \(section)") as! NSArray
        
        return (Config.Constants.isUserGuest) ? (sectionArray.count - 1) : sectionArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "MenuCell", for: indexPath) as! MenuViewCell
        let sectionArray = menuItemsList.object(forKey: "Section \(indexPath.section)") as! NSArray
        let sectionDictionary = sectionArray[indexPath.row] as! NSDictionary
        
        cell.setup(menuItem: sectionDictionary)
        
        cell.newEventButtonHandlerCompletion = { sender in
            if (sender.tag == 0) {
                let ordersNC = UIStoryboard(name: "OrdersShow", bundle: nil).instantiateViewController(withIdentifier: "OrdersShowNC") as! BaseNavigationController
                self.revealViewController().pushFrontViewController(ordersNC.viewControllers.first, animated: true)
            } else {
                self.performSegue(withIdentifier: (sender as! MenuViewCell).segueName, sender: self)
            }
        }
        
        return cell
    }
}


// MARK: - UITableViewDelegate
extension SlideMenuShowViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cell = tableView.cellForRow(at: indexPath) as! MenuViewCell
        
        if indexPath.section == 0 && indexPath.row == 0 {
            let ordersNC = UIStoryboard(name: "OrdersShow", bundle: nil).instantiateViewController(withIdentifier: "OrdersShowNC") as! BaseNavigationController
            revealViewController().pushFrontViewController(ordersNC.viewControllers.first, animated: true)
        } else {
            // Menu section 4 (Logout)
            if indexPath.section == 4 {
                self.revealViewController().revealToggle(animated: true)
                
                socialVK.didTransitionFrom(currentView: self.revealViewController().view, withCompletionHandler: { _ in
                    VK.logOut()
                    GIDSignIn.sharedInstance().signOut()
                    let loginManager: FBSDKLoginManager = FBSDKLoginManager()
                    loginManager.logOut()

                    Config.Constants.isUserGuest = true
                    (UIApplication.shared.delegate as! AppDelegate).changeBackgroundView()
                    AppScenesCoordinator.init().startLaunchScreen()
                })
            } else {
                guard cell.segueName != "OmnieSoftShowSegue" else {
                    tableView.deselectRow(at: indexPath, animated: true)

                    return
                }
                
                self.performSegue(withIdentifier: cell.segueName, sender: self)
            }
        }
        
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 36.0
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return (section == 0) ? 12.0 : 7.0
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        return tableView.dequeueReusableHeaderFooterView(withIdentifier: "MenuSectionHeaderView") as? MenuSectionHeaderView
    }

    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return (section != menuItemsList.count - 1) ? 7.0 : 12.0
    }
    
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int) -> UIView? {
        return (section != menuItemsList.count - 1) ? tableView.dequeueReusableHeaderFooterView(withIdentifier: "MenuSectionFooterView") as? MenuSectionFooterView : tableView.dequeueReusableHeaderFooterView(withIdentifier: "MenuSectionHeaderView") as? MenuSectionHeaderView
    }
}
