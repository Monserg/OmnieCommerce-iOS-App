//
//  OrganizationShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 26.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Alamofire
import AlamofireImage

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrganizationShowViewControllerInput {
    func displaySomething(viewModel: OrganizationShowModels.Something.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrganizationShowViewControllerOutput {
    func doSomething(requestModel: OrganizationShowModels.Something.RequestModel)
}

class OrganizationShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrganizationShowViewControllerOutput!
    var router: OrganizationShowRouter!
    
    var organization: Organization!
    var headerView: UMParallaxView?
    
    @IBOutlet var scrollView: UIScrollView! {
        didSet {
            scrollView.delegate     =   self
        }
    }
    
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    
    // Info view
    @IBOutlet weak var infoView: UIView!
    @IBOutlet weak var logoImageView: CustomImageView!
    @IBOutlet weak var nameLabel: CustomLabel!
    @IBOutlet weak var favoriteButton: CustomButton!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrganizationShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        smallTopBarView.type        =   "Child"
        topBarViewStyle             =   .Small
        setup(topBarView: smallTopBarView)
        
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Set organization title
        smallTopBarView.titleText   =   organization.name
        
        // NOTE: Ask the Interactor to do some work
        let requestModel            =   OrganizationShowModels.Something.RequestModel()
        interactor.doSomething(requestModel: requestModel)
        
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
        
        // Parallax
        if (organization.headerURL != nil) {
            headerView                      =   UMParallaxView(height: 150, fixed: true)
            headerView!.backgroundColor     =   UIColor.clear
            
            // Get header image
            Alamofire.request(organization.headerURL!).responseImage { response in
                if let image = response.result.value {
                    self.headerView!.image  =   image
                }
            }

            // Add Back button
            let backButton                  =   UIButton.init(frame: CGRect.init(origin: CGPoint.init(x: 4, y: 20), size: CGSize.init(width: 44, height: 44)))
            backButton.imageEdgeInsets      =   UIEdgeInsets(top: 0, left: -16, bottom: 0, right: 0)
            backButton.setImage(UIImage.init(named: "icon-back-bar-button-normal"), for: .normal)
            backButton.addTarget(self, action: #selector(handlerBackButtonTap), for: .touchUpInside)
            
            headerView!.addSubview(backButton)
            
            // Settings
            headerView!.maxHeight           =   150
            headerView!.minHeight           =   smallTopBarView.bounds.height
            smallTopBarView.alpha           =   0
            
            headerView?.attachTo(scrollView)
            
            scrollView.contentSize          =   CGSize(width: self.view.frame.width, height: self.view.frame.height + 150)
        }
        
        // Initial Info view
        nameLabel.text                      =   organization.name + " jashdjk hjahdjahs hahd asd asdgag dgahd ghasg hgash dgashjgd ags dgasdaseyqteyqu  i slasldklaskdasklaskdlask"
        nameLabel.lineBreakMode             =   .byTruncatingTail
        nameLabel.numberOfLines             =   2
        nameLabel.adjustsFontSizeToFitWidth =   false
        
        favoriteButton.tag                  =   (organization.isFavorite) ? 1 : 0
        favoriteButton.setImage(UIImage.init(named: (favoriteButton.tag == 0) ? "image-favorite-star-normal" : "image-favorite-star-selected"), for: .normal)

        if (organization.logoURL != nil) {
            Alamofire.request(organization.logoURL!).responseImage { response in
                if let image = response.result.value {
                    self.logoImageView!.image           =   image
                    self.logoImageView!.contentMode     =   .scaleAspectFit
                }
            }
        }
    }
    
    
    // MARK: - Actions
    func handlerBackButtonTap(_ sender: UIButton) {
        _ = self.navigationController?.popViewController(animated: true)
    }
    
    
    // MARK: - UIScrollViewDelegate
    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
        scrollView.indicatorDidChange(UIColor.veryLightOrange)
        
        guard headerView != nil else {
            scrollView.transform                =   CGAffineTransform(translationX: 0, y: smallTopBarView.frame.height - 30)
            
            return
        }
        
        headerView!.scrollViewDidScroll(scrollView)
       
        print(object: "y = \(scrollView.contentOffset.y)")
        print(object: "height = \(headerView!.frame.height)")

        if smallTopBarView.frame.height...(headerView!.maxHeight + 20) ~= headerView!.frame.height {
            scrollView.scrollIndicatorInsets    =   UIEdgeInsets(top: abs(scrollView.contentOffset.y), left: 0, bottom: 0, right: 0)
        }
        
        if headerView!.minHeight...smallTopBarView.frame.height ~= headerView!.frame.height {
            scrollView.scrollIndicatorInsets    =   UIEdgeInsets(top: smallTopBarView.frame.height, left: 0, bottom: 0, right: 0)
        }

        if (headerView!.frame.height == headerView!.minHeight && smallTopBarView.alpha == 0) {
            UIView.animate(withDuration: 0.7, animations: {
                self.smallTopBarView.alpha      =   1
                self.headerView!.alpha          =   0
            })
        } else if (headerView!.frame.height != headerView!.minHeight && headerView!.alpha == 0) {
            UIView.animate(withDuration: 0.7, animations: {
                self.smallTopBarView.alpha      =   0
                self.headerView!.alpha          =   1
            })
        }
        
        print(object: "top = \(scrollView.contentInset.top)")
        print(object: "height = \(headerView!.frame.height)")
    }
    
    @IBAction func handlerAddressButtonTap(_ sender: CustomButton) {
        router.navigateToOrganizationsMapShowScene(organization)
    }
    
    @IBAction func handlerPhonesButtonTap(_ sender: CustomButton) {
        guard organization.phones != nil else {
            alertViewDidShow(withTitle: "Info".localized(), andMessage: "Phones list is empty".localized())
           
            return
        }
        
        if (organization.phones!.count > 0) {
            let widthRatio                      =   375 / view.frame.width
            let heightRatio                     =   667 / view.frame.height
            let phonesView                      =   PhonesView.init(frame: CGRect.init(x: 0, y: 0, width: 345 * widthRatio, height: 185 * heightRatio))
            phonesView.phones                   =   organization.phones!
            phonesView.alpha                    =   0
            
            view.addSubview(phonesView)
            phonesView.transform                =   CGAffineTransform(translationX: 15 * widthRatio, y: view.center.y - phonesView.frame.height / 2)
            
            UIView.animate(withDuration: 0.9, animations: {
                phonesView.alpha                =   1
            })
        }
    }
    
    @IBAction func handlerScheduleButtonTap(_ sender: CustomButton) {
    }
    
    @IBAction func handlerFavoriteButtonTap(_ sender: UIButton) {
        sender.tag      =   (sender.tag == 0) ? 1 : 0
        
        sender.setImage(UIImage.init(named: (sender.tag == 0) ? "image-favorite-star-normal" : "image-favorite-star-selected"), for: .normal)
        
        // TODO: - ADD API TO POST FAVORITE STATE & CHANGE ORGANIZATION PROFILE
    }
}


// MARK: - OrganizationShowViewControllerInput
extension OrganizationShowViewController: OrganizationShowViewControllerInput {
    func displaySomething(viewModel: OrganizationShowModels.Something.ViewModel) {
        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
}
