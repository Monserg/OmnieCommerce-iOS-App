//
//  OrganizationShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 26.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationShowPresenterInput {
    func organizationRatingDidPrepareToShowSend(fromResponseModel responseModel: OrganizationShowModels.Rating.ResponseModel)
    func organizationDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationShowModels.OrganizationItem.ResponseModel)
    func businessCardDidPrepareToShowCreateFromOrganization(fromResponseModel responseModel: OrganizationShowModels.BusinessCard.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationShowPresenterOutput: class {
    func organizationRatingDidShowSend(fromViewModel viewModel: OrganizationShowModels.Rating.ViewModel)
    func organizationDidShowLoad(fromViewModel viewModel: OrganizationShowModels.OrganizationItem.ViewModel)
    func businessCardDidShowCreateFromOrganization(fromViewModel viewModel: OrganizationShowModels.BusinessCard.ViewModel)
}

class OrganizationShowPresenter: OrganizationShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func organizationDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationShowModels.OrganizationItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let organizationViewModel = OrganizationShowModels.OrganizationItem.ViewModel(status: "RESPONSE_NIL")
            viewController.organizationDidShowLoad(fromViewModel: organizationViewModel)
            
            return
        }
        
        // Convert responseAPI body to Organization CoreData news objects
        if let organization = CoreDataManager.instance.entityBy("Organization", andCodeID: responseModel.parameters["id"] as! String) as? Organization {
            organization.profileDidUpload(json: responseModel.responseAPI!.body as! [String: AnyObject], forList: keyOrganization)
        }
        
        CoreDataManager.instance.didSaveContext()

        let organizationViewModel = OrganizationShowModels.OrganizationItem.ViewModel(status: responseModel.responseAPI!.status)
        self.viewController.organizationDidShowLoad(fromViewModel: organizationViewModel)
    }
    
    func organizationRatingDidPrepareToShowSend(fromResponseModel responseModel: OrganizationShowModels.Rating.ResponseModel) {
        let organizationRatingViewModel = OrganizationShowModels.Rating.ViewModel(status: (responseModel.responseAPI?.status)!)
        viewController.organizationRatingDidShowSend(fromViewModel: organizationRatingViewModel)
    }
    
    func businessCardDidPrepareToShowCreateFromOrganization(fromResponseModel responseModel: OrganizationShowModels.BusinessCard.ResponseModel) {
        let businessCardViewModel = OrganizationShowModels.BusinessCard.ViewModel(status: (responseModel.responseAPI?.status)!)
        viewController.businessCardDidShowCreateFromOrganization(fromViewModel: businessCardViewModel)
    }
}
