//
//  OrganizationShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 26.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrganizationShowPresenterInput {
    func organizationDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationShowModels.OrganizationItem.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrganizationShowPresenterOutput: class {
    func organizationDidShowLoad(fromViewModel viewModel: OrganizationShowModels.OrganizationItem.ViewModel)
}

class OrganizationShowPresenter: OrganizationShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrganizationShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func organizationDidPrepareToShowLoad(fromResponseModel responseModel: OrganizationShowModels.OrganizationItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let organizationViewModel = OrganizationShowModels.OrganizationItem.ViewModel(status: (responseModel.responseAPI?.status)!,
                                                                                          organizationItem: nil)

            viewController.organizationDidShowLoad(fromViewModel: organizationViewModel)
            return
        }
        
        // Prepare to save Organization profile in CoreData
        let organization = Organization.init(withCommonProfile: false)
  
        organization.didMap(fromDictionary: responseModel.responseAPI?.body as! [String: Any], completion: { _ in
//            var entityOrganization = CoreDataManager.instance.entityDidLoad(byName: keyOrganization) as? Organization
//            entityOrganization = organization
        
            let organizationViewModel = OrganizationShowModels.OrganizationItem.ViewModel(status: responseModel.responseAPI!.status,
                                                                                          organizationItem: organization)

            self.viewController.organizationDidShowLoad(fromViewModel: organizationViewModel)
        })
    }
}
