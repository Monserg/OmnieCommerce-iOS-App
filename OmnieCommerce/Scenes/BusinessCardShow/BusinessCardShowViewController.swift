//
//  BusinessCardShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 30.05.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Kingfisher

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol BusinessCardShowViewControllerInput {
    func businessCardDidShowDelete(fromViewModel viewModel: BusinessCardShowModels.Item.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol BusinessCardShowViewControllerOutput {
    func businessCardDidDelete(withRequestModel requestModel: BusinessCardShowModels.Item.RequestModel)
}

class BusinessCardShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: BusinessCardShowViewControllerOutput!
    var router: BusinessCardShowRouter!
    
    var businessCardID: String!
    
    
    // MARK: - Outlets
    @IBOutlet var modalView: ModalView!
    @IBOutlet weak var cardImageView: UIImageView!

    @IBOutlet weak var smallTopBarView: SmallTopBarView! {
        didSet {
            smallTopBarView.actionButton.isHidden = true
        }
    }

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        BusinessCardShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        
        if (blackoutView != nil) {
            modalView?.center = blackoutView!.center
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Child"
        haveMenuItem = false
        
        // Load Business Card
        if let businessCard = CoreDataManager.instance.entityBy("BusinessCard", andCodeID: businessCardID) as? BusinessCard {
            if let cardImageID = businessCard.imageID, !cardImageID.isEmpty {
                self.cardImageView.kf.setImage(with: ImageResource(downloadURL: cardImageID.convertToURL(withSize: .Medium, inMode: .Get), cacheKey: cardImageID),
                                               placeholder: nil,
                                               options: [.transition(ImageTransition.fade(1)),
                                                         .processor(ResizingImageProcessor(referenceSize: self.cardImageView.frame.size,
                                                                                           mode: .aspectFill))],
                                               completionHandler: { image, error, cacheType, imageURL in
                                                self.cardImageView.kf.cancelDownloadTask()
                })
            } else {
                self.cardImageView.contentMode = .center
                self.cardImageView.backgroundColor = UIColor.init(hexString: "#273745")
                
                UIView.animate(withDuration: 0.5, animations: {
                    self.cardImageView.image = UIImage.init(named: "image-no-photo")
                })
            }
        }
    }

    func modalViewDidShow() {
        if (blackoutView == nil) {
            blackoutView = MSMBlackoutView.init(inView: view)
            blackoutView!.didShow()
            self.revealViewController().panGestureRecognizer().isEnabled = false
        }
        
        modalView = ModalView.init(inView: blackoutView!, withHeight: 185.0)
        let popupView = ConfirmSaveView.init(inView: modalView!, withText: "Business–°ard delete message")
        
        // Handler Cancel button tap
        popupView.handlerCancelButtonCompletion = { _ in
            self.blackoutView!.didHide()
            self.blackoutView = nil
            self.revealViewController().panGestureRecognizer().isEnabled = true
            
            self.navigationController!.popViewController(animated: true)
        }
    }
    
    
    // MARK: - Transition
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        smallTopBarView.setNeedsDisplay()
        self.view.layoutIfNeeded()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerDeleteBusinessCardButtonTap(_ sender: UbuntuLightItalicVeryLightOrangeButton) {
        guard isNetworkAvailable else {
            self.alertViewDidShow(withTitle: "Info", andMessage: "Disconnected from Network", completion: { _ in })
            
            return
        }
        
        spinnerDidStart(view)
        
        let businessCardRequestModel = BusinessCardShowModels.Item.RequestModel(parameters: [ "id": businessCardID ])
        interactor.businessCardDidDelete(withRequestModel: businessCardRequestModel)
    }
    
    @IBAction func handlerEditButtonTap(_ sender: UIButton) {
        self.router.navigateToBusinessCardCreateScene(withBusinessCardID: businessCardID)
    }
    
    @IBAction func handlerBackButtonTap(_ sender: UIButton) {
        self.navigationController?.popViewController(animated: true)
    }
}


// MARK: - BusinessCardShowViewControllerInput
extension BusinessCardShowViewController: BusinessCardShowViewControllerInput {
    func businessCardDidShowDelete(fromViewModel viewModel: BusinessCardShowModels.Item.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { _ in })
            return
        }
        
        // Show success modal view
        modalViewDidShow()
    }
}
