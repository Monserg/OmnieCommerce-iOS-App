//
//  SignInShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 13.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftyVK

// MARK: - Input & Output protocols
protocol SignInShowViewControllerInput {
    func displaySomething(viewModel: SignInShow.Something.ViewModel)
}

protocol SignInShowViewControllerOutput {
    func doSomething(request: SignInShow.Something.Request)
}

class SignInShowViewController: BaseViewController, SignInShowViewControllerInput {
    // MARK: - Properties
    var output: SignInShowViewControllerOutput!
    var router: SignInShowRouter!
    let socialVK = SocialVK()
    var socialGoogle: SocialGoogle!
    
    @IBOutlet var bigTopBarView: BigTopBarView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var nameTextField: CustomTextField!
    @IBOutlet weak var passwordTextField: CustomTextField!

    @IBOutlet weak var vkontakteButton: CustomButton!
    @IBOutlet weak var googleButton: CustomButton!
    @IBOutlet weak var facebookButton: CustomButton!
    @IBOutlet weak var signInButton: GIDSignInButton!
    
    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SignInShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Delegates
        scrollView.delegate = self
        nameTextField.delegate = self
        passwordTextField.delegate = self
        
        // Config controls
        topBarViewStyle = .Big
        scrollViewBase = scrollView

        // Set buttons type
        vkontakteButton.designStyle = "Social"
        googleButton.designStyle = "Social"
        facebookButton.designStyle = "Social"
        
        setup(topBarView: bigTopBarView)
        
        doSomethingOnLoad()
        
        // Google Delegate
        socialGoogle = SocialGoogle.init(withRootViewController: self)
        GIDSignIn.sharedInstance().delegate = socialGoogle
        GIDSignIn.sharedInstance().uiDelegate = self
    }
    
    
    // MARK: - Custom Functions
    func doSomethingOnLoad() {
        print(object: "\(type(of: self)): \(#function) run.")

        // NOTE: Ask the Interactor to do some work
        let request = SignInShow.Something.Request()
        output.doSomething(request: request)
    }
    
    // Display logic
    func displaySomething(viewModel: SignInShow.Something.ViewModel) {
        print(object: "\(type(of: self)): \(#function) run.")

        // NOTE: Display the result from the Presenter
        // nameTextField.text = viewModel.name
    }
    
    func setupScene(withSize size: CGSize) {
        print(object: "\(type(of: self)): \(#function) run. Screen view size = \(size)")

        bigTopBarView.setNeedsDisplay()
        bigTopBarView.circleView.setNeedsDisplay()
        vkontakteButton.setNeedsDisplay()
        googleButton.setNeedsDisplay()
        facebookButton.setNeedsDisplay()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSignInButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
    }
    
    @IBAction func handlerVkontakteButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        
        if (VK.state == .authorized) {
            VK.logOut()
        }
        
        VK.logIn()
        
        // VK complition handler
        socialVK.loginComplitionHandler = { dictionary in
            self.socialVK.didTransitionFrom(currentView: self.view!, withCompletionHandler: { success in
            //print("\(success)")
            })
        }
    }
    
    @IBAction func handlerGoogleButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        
        GIDSignIn.sharedInstance().signIn()
    }
    
    @IBAction func handlerFacebookButtonTap(_ sender: CustomButton) {
        print(object: "\(type(of: self)): \(#function) run.")
        
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        setupScene(withSize: size)
    }
}


// MARK: - GIDSignInUIDelegate
extension SignInShowViewController: GIDSignInUIDelegate {
    // Stop the UIActivityIndicatorView animation that was started when the user
    // pressed the Sign In button
    private func signInWillDispatch(signIn: GIDSignIn!, error: NSError!) {
        print(object: "#function")
    }
    
    // Present a view that prompts the user to sign in with Google
    private func signIn(signIn: GIDSignIn!, presentViewController viewController: UIViewController!) {
        print(object: "#function")

        self.present(viewController, animated: true, completion: nil)
    }
    
    // Dismiss the "Sign in with Google" view
    private func signIn(signIn: GIDSignIn!, dismissViewController viewController: UIViewController!) {
        print(object: "#function")

        self.dismiss(animated: true, completion: nil)
    }
}
