//
//  SettingsShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 15.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol SettingsShowViewControllerInput {
    func appSettingsDidShowLoad(fromViewModel viewModel: SettingsShowModels.Items.ViewModel)
}

protocol SettingsShowViewControllerOutput {
    func appSettingsDidLoad(withRequestModel requestModel: SettingsShowModels.Items.RequestModel)
}

class SettingsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: SettingsShowViewControllerOutput!
    var router: SettingsShowRouter!
    
    var appSettings: AppSettings!
    
    var pickerViewManager: MSMPickerViewManager! {
        didSet {
            guard eventPickerView != nil else {
                return
            }
            
            eventPickerView.delegate = self.pickerViewManager
            eventPickerView.dataSource = self.pickerViewManager
            
            let parameters = appSettings.notifyDelay.convertToParameters()

            self.pickerViewManager.selectedDayIndex = parameters["day"]!
            self.pickerViewManager.selectedHourIndex = parameters["hours"]!
            self.pickerViewManager.selectedMinuteIndex = parameters["minutes"]!
            self.pickerViewManager.selectedMonthIndex = Calendar.current.dateComponents([.month], from: Date()).month! - 1
            
            eventPickerView.selectRow(self.pickerViewManager.selectedDayIndex, inComponent: 0, animated: true)
            eventPickerView.selectRow(self.pickerViewManager.selectedHourIndex, inComponent: 2, animated: true)
            eventPickerView.selectRow(self.pickerViewManager.selectedMinuteIndex, inComponent: 4, animated: true)
        }
    }

    // Outlets
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            scrollViewBase = scrollView
        }
    }

    // Push View
    @IBOutlet weak var pushCheckButton: DLRadioButton! {
        didSet {
            pushCheckButton.setTitle("Setting push offline mode".localized(), for: .normal)
        }
    }
    @IBOutlet weak var pushLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var pushSwitch: UISwitch!
    
    // Sound View
    @IBOutlet weak var soundLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var soundSwitch: UISwitch!
    
    // Event View
    @IBOutlet weak var eventLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var eventSwitch: UISwitch!
    @IBOutlet weak var eventPickerView: UIPickerView!
    
    @IBOutlet var labelsCollection: [UILabel]! {
        didSet {
            _ = labelsCollection.map { $0.text = $0.text!.localized() }
        }
    }
    
    // Sync View
    @IBOutlet weak var syncLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var syncSwitch: UISwitch!
    
    // Scheme View
    @IBOutlet weak var schemeLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var schemeSwitch: UISwitch!
    
    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SettingsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Parent"
        haveMenuItem = true
        
        // Load data
        appSettingsDidLoadData()
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        scrollView.indicatorDidChange(UIColor.veryLightOrange)
    }

    
    // MARK: - Custom Functions
    func appSettingsDidLoadData() {
        guard isNetworkAvailable else {
            appSettingsDidShow()
            return
        }
        
        let appSettingsRequestModel = SettingsShowModels.Items.RequestModel(parameters: nil)
        interactor.appSettingsDidLoad(withRequestModel: appSettingsRequestModel)
    }

    func appSettingsDidShow() {
        // TODO: - SHOW ITEMS AS DESIGN ELEMENTS
        appSettings = CoreDataManager.instance.entityDidLoad(byName: "AppSettings", andPredicateParameters: nil) as! AppSettings
        
        // Create PickerViewManager
        pickerViewManager = MSMPickerViewManager.init(self.view.frame, forScene: "SettingsShow")

        // Show
        pushSwitch.isOn = appSettings.pushNotify
        pushCheckButton.isSelected = appSettings.whenCloseApp
        eventSwitch.isOn = appSettings.notifyEvent
        soundSwitch.isOn = appSettings.soundNotify
        syncSwitch.isOn = appSettings.calendarSync
        schemeSwitch.isOn = appSettings.lightColorSchema
        
        spinnerDidFinish()
    }
    
    func parametersDidPrepare() -> [String: AnyObject] {
        return [
                    "pushNotify":       pushSwitch.isOn as AnyObject,
                    "whenCloseApp":     pushCheckButton.isSelected as AnyObject,
                    "notifyEvent":      eventSwitch.isOn as AnyObject,
                    "soundNotify":      soundSwitch.isOn as AnyObject,
                    "notifyDelay":      notifyDelayDidPrepare(),
                    "calendarSync":     syncSwitch.isOn as AnyObject,
                    "lightColorSchema": schemeSwitch.isOn as AnyObject
                ]
    }
    
    func notifyDelayDidPrepare() -> AnyObject {
        return UInt64.convertToNumber(["day": pickerViewManager.selectedDayIndex, "hours": pickerViewManager.selectedHourIndex, "minutes": pickerViewManager.selectedMinuteIndex]) as AnyObject
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSaveButtonTap(_ sender: FillVeryLightOrangeButton) {
        spinnerDidStart(view)
        appSettingsDidLoadData()
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: BorderVeryLightOrangeButton) {
        router.navigateToNewsDataShow()
    }
    
    @IBAction func handlerPushCheckButtonTap(_ sender: DLRadioButton) {
        sender.tag = (sender.tag == 0) ? 1 : 0
        
        if (sender.tag == 1) {
            sender.isSelected = true
        } else {
            sender.isSelected = false
        }
    }

    @IBAction func handlerPushSwitchChangeValue(_ sender: UISwitch) {
        pushLabel.textColor = (sender.isOn) ? UIColor.veryLightGray : UIColor.veryDarkGrayishBlue56
        pushCheckButton.isEnabled = sender.isOn
    }

    @IBAction func handlerSoundSwitchChangeValue(_ sender: UISwitch) {
        soundLabel.textColor = (sender.isOn) ? UIColor.veryLightGray : UIColor.veryDarkGrayishBlue56
    }
    
    @IBAction func handlerEventSwitchChangeValue(_ sender: UISwitch) {
        eventLabel.textColor = (sender.isOn) ? UIColor.veryLightGray : UIColor.veryDarkGrayishBlue56
        eventPickerView.isUserInteractionEnabled = sender.isOn
    }

    @IBAction func handlerSyncSwitchChangeValue(_ sender: UISwitch) {
        syncLabel.textColor = (sender.isOn) ? UIColor.veryLightGray : UIColor.veryDarkGrayishBlue56
    }

    @IBAction func handlerSchemeSwitchChangeValue(_ sender: UISwitch) {
        schemeLabel.textColor = (sender.isOn) ? UIColor.veryLightGray : UIColor.veryDarkGrayishBlue56
    }
}


// MARK: - SettingsShowViewControllerInput
extension SettingsShowViewController: SettingsShowViewControllerInput {
    func appSettingsDidShowLoad(fromViewModel viewModel: SettingsShowModels.Items.ViewModel) {
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: {
                self.appSettingsDidShow()
            })
            
            return
        }
        
        self.appSettingsDidShow()
    }
}
