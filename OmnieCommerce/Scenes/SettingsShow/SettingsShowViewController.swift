//
//  SettingsShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 15.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input & Output protocols
protocol SettingsShowViewControllerInput {
    func appSettingsDidShowLoad(fromViewModel viewModel: SettingsShowModels.Items.ViewModel)
}

protocol SettingsShowViewControllerOutput {
    func appSettingsDidLoad(withRequestModel requestModel: SettingsShowModels.Items.RequestModel)
}

class SettingsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: SettingsShowViewControllerOutput!
    var router: SettingsShowRouter!
    
    var appSettings = [AppSettings]()
    
    // Outlets
    @IBOutlet weak var smallTopBarView: SmallTopBarView!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SettingsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Parent"
        haveMenuItem = true
        
        // Load data
        guard isNetworkAvailable else {
            appSettingsDidShow()
            return
        }
        
        let appSettingsRequestModel = SettingsShowModels.Items.RequestModel(parameters: parametersDidPrepare())
        interactor.appSettingsDidLoad(withRequestModel: appSettingsRequestModel)
    }
    
    
    // MARK: - Custom Functions
    func appSettingsDidShow() {
        // TODO: - SHOW ITEMS AS DESIGN ELEMENTS
    }
    
    func parametersDidPrepare() -> [String: AnyObject] {
        return [
                    "pushNotify":       false as AnyObject,
                    "whenCloseApp":     true as AnyObject,
                    "notifyEvent":      true as AnyObject,
                    "soundNotify":      true as AnyObject,
                    "notifyDelay":      900 as AnyObject,
                    "calendarSync":     true as AnyObject,
                    "lightColorSchema": true as AnyObject
                ]
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
    }
}


// MARK: - SettingsShowViewControllerInput
extension SettingsShowViewController: SettingsShowViewControllerInput {
    func appSettingsDidShowLoad(fromViewModel viewModel: SettingsShowModels.Items.ViewModel) {
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: {
                self.appSettingsDidShow()
            })
            
            return
        }
        
        self.appSettingsDidShow()
    }
}
