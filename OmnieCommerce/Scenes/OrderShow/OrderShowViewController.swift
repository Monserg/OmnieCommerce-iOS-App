//
//  OrderShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 29.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol OrderShowViewControllerInput {
    func orderDidShowLoad(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func orderDidShowCreate(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func orderDidShowCancel(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func totalPriceDidShowLoad(fromViewModel viewModel: OrderShowModels.TotalPrice.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol OrderShowViewControllerOutput {
    func orderDidLoad(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func orderDidCreate(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func orderDidCancel(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func totalPriceDidLoad(withRequestModel requestModel: OrderShowModels.TotalPrice.RequestModel)
}

class OrderShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: OrderShowViewControllerOutput!
    var router: OrderShowRouter!
    
    var orderID: String?
    var orderPrepare: OrderPrepare?
    var bodyRequestParameters: [String: AnyObject]?
    var orderProfile: Order?
    
    // Outlets
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet var modalView: ModalView!
    
    @IBOutlet weak var scrollView: UIScrollView! {
        didSet {
            scrollView.delegate = self
            scrollViewBase = scrollView
        }
    }
    
    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map { $0.style = .BottomDottedLine }
        }
    }

    // Info view
    @IBOutlet weak var stateButton: BorderTitleButton!
    @IBOutlet weak var organizationNameLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var serviceNameLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var additionalServicesNames: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var periodDateLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var periodTimesLabel: UbuntuLightVeryLightGrayLabel!
    @IBOutlet weak var commentTextLabel: UbuntuLightVeryLightGrayLabel!
    
    // Price view
    @IBOutlet weak var priceLabel: UbuntuLightVeryLightOrangeLabel!
    
    
    // Action view
    @IBOutlet weak var actionView: UIView!
    
    @IBOutlet weak var checkButton: DLRadioButton! {
        didSet {
            checkButton.setTitle("Save as template".localized(), for: .normal)
        }
    }
    
    // Cancel Action view
    @IBOutlet weak var cancelActionView: UIView!
    
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        OrderShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }


    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Child"
        haveMenuItem = false
        
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            _ = self.navigationController?.popViewController(animated: true)
        }
        
        spinnerDidStart(view)
        
        guard isNetworkAvailable else {
            orderProfileDidShow()
            return
        }
        
        // Load Order profile data
        if (orderID != nil) {
            let orderRequestModel = OrderShowModels.OrderItem.RequestModel(parameters: [ "id": orderID! ])
            interactor.orderDidLoad(withRequestModel: orderRequestModel)
            
            actionView.isHidden = false
            cancelActionView.isHidden = true
        } else {
            orderProfileDidShow()

            actionView.isHidden = true
            stateButton.isHidden = true
            cancelActionView.isHidden = false
        }
        
        // Get total price
//        let priceRequestModel = OrderShowModels.TotalPrice.RequestModel(parameters: bodyRequestParameters!)
//        interactor.totalPriceDidLoad(withRequestModel: priceRequestModel)
    }
    
    func orderProfileDidShow() {
        // Info view
        if (orderID != nil) {
            if let orderEntity = CoreDataManager.instance.entityBy("Order", andCodeID: orderID!) as? Order {
                orderProfile = orderEntity
            
                organizationNameLabel.text = orderProfile!.organizationName
                serviceNameLabel.text = orderProfile!.serviceName
                additionalServicesNames.numberOfLines = 0
                
//            additionalServicesNames.text = orderProfile.additionalServices
                
                periodDateLabel.text = orderPrepare!.period.datesPeriod.dateStart.convertToString(withStyle: .DateDot)
                periodTimesLabel.text = "\("From".localized()) \(String(orderPrepare!.period.timesPeriod.hourStart).twoNumberFormat()):\(String(orderPrepare!.period.timesPeriod.minuteStart).twoNumberFormat()) \("To".localized()) \(String(orderPrepare!.period.timesPeriod.hourEnd).twoNumberFormat()):\(String(orderPrepare!.period.timesPeriod.minuteEnd).twoNumberFormat())"
                
                commentTextLabel.numberOfLines = 0
                commentTextLabel.text = orderProfile!.comment
            }
        } else {
            organizationNameLabel.text = orderPrepare!.organizationName
            serviceNameLabel.text = orderPrepare!.serviceName
            additionalServicesNames.numberOfLines = 0
            additionalServicesNames.text = orderPrepare!.additionalServices
            periodDateLabel.text = orderPrepare!.period.datesPeriod.dateStart.convertToString(withStyle: .DateDot)
            periodTimesLabel.text = "\("From".localized()) \(String(orderPrepare!.period.timesPeriod.hourStart).twoNumberFormat()):\(String(orderPrepare!.period.timesPeriod.minuteStart).twoNumberFormat()) \("To".localized()) \(String(orderPrepare!.period.timesPeriod.hourEnd).twoNumberFormat()):\(String(orderPrepare!.period.timesPeriod.minuteEnd).twoNumberFormat())"
            commentTextLabel.numberOfLines = 0
            commentTextLabel.text = orderPrepare!.comment
        }
        
        // Action view
        checkButton.sizeToFit()
        spinnerDidFinish()
    }
    
    func modalViewDidShow(withHeight height: CGFloat, customSubview subView: CustomView, andValues values: [Any]?) {
        if (blackoutView == nil) {
            blackoutView = MSMBlackoutView.init(inView: view)
            blackoutView!.didShow()
        }
        
        modalView = ModalView.init(inView: blackoutView!, withHeight: height)
        _ = ConfirmView.init(inView: modalView!)
    }
    
    
    // MARK: - Transition
    override func willTransition(to newCollection: UITraitCollection, with coordinator: UIViewControllerTransitionCoordinator) {
        _ = dottedBorderViewsCollection.map { $0.setNeedsDisplay() }
    }

    
    // MARK: - Actions
    @IBAction func handlerConfirmButtonTap(_ sender: FillVeryLightOrangeButton) {
        let orderCreateRequestModel = OrderShowModels.OrderItem.RequestModel(parameters: bodyRequestParameters!)
        interactor.orderDidCreate(withRequestModel: orderCreateRequestModel)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: BorderVeryLightOrangeButton) {
        let orderCreateRequestModel = OrderShowModels.OrderItem.RequestModel(parameters: [ "id": orderID! ])
        interactor.orderDidCreate(withRequestModel: orderCreateRequestModel)
    }
    
    @IBAction func handlerCheckButtonTap(_ sender: DLRadioButton) {
        sender.tag = (sender.tag == 0) ? 1 : 0
        
        if (sender.tag == 1) {
            sender.isSelected = true
        } else {
            sender.isSelected = false
        }
    }
    
    @IBAction func handlerCancelPreviewOrderButtonTap(_ sender: BorderVeryLightOrangeButton) {
        self.navigationController?.popViewController(animated: true)
    }
}


// MARK: - OrderShowViewControllerInput
extension OrderShowViewController: OrderShowViewControllerInput {
    func orderDidShowLoad(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { })
            
            return
        }
        
        self.orderID = viewModel.orderID!
        self.orderProfileDidShow()
    }
    
    func orderDidShowCreate(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { })
            
            return
        }
        
        self.navigationController?.popToRootViewController(animated: true)
    }
    
    func orderDidShowCancel(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { })
            
            return
        }
        
        self.navigationController?.popViewController(animated: true)
    }
    
    func totalPriceDidShowLoad(fromViewModel viewModel: OrderShowModels.TotalPrice.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { })
            
            return
        }
        
        // Price view
        if let totalPrice = viewModel.value {
            self.priceLabel.text = String(format: "%3.2f", totalPrice)
        }
    }
}


// MARK: - UIScrollViewDelegate
//extension OrderShowViewController: UIScrollViewDelegate {
//    override func scrollViewDidScroll(_ scrollView: UIScrollView) {
//        scrollView.indicatorDidChange(UIColor.veryLightOrange)
//    }
//}
