//
//  OrderShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 29.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrderShowPresenterInput {
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrderShowPresenterOutput: class {
    func orderDidShowLoad(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
}

class OrderShowPresenter: OrderShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrderShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: "RESPONSE_NIL")
            viewController.orderDidShowLoad(fromViewModel: orderViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
//        let order = Order.init(json: responseModel.responseAPI?.body as! [String: AnyObject], andOrganization: nil)
//        
//        if let pricesList = service?.prices, pricesList.count > 0 {
//            let pricesArray = Array(pricesList)
//            _ = pricesArray.map({ ($0 as! Price).cellHeight = 20.0; ($0 as! Price).cellIdentifier = "PriceServiceTableViewCell" })
//            service!.prices = NSSet.init(array: pricesArray)
//        }
//        
//        if let placeID = service!.placeID {
//            service!.googlePlaceDidLoad(positionID: placeID, completion: { _ in
//                CoreDataManager.instance.didSaveContext()
//                
//                let serviceViewModel = ServiceShowModels.ServiceItem.ViewModel(status: responseModel.responseAPI!.status)
//                self.viewController.serviceDidShowLoad(fromViewModel: serviceViewModel)
//            })
//        }
    }
}
