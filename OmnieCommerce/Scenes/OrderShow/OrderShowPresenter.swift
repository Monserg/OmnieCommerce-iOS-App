//
//  OrderShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 29.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol OrderShowPresenterInput {
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func orderDidPrepareToShowCreate(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func orderDidPrepareToShowCancel(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func totalPriceDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.TotalPrice.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol OrderShowPresenterOutput: class {
    func orderDidShowLoad(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func orderDidShowCreate(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func orderDidShowCancel(fromViewModel viewModel: OrderShowModels.OrderItem.ViewModel)
    func totalPriceDidShowLoad(fromViewModel viewModel: OrderShowModels.TotalPrice.ViewModel)
}

class OrderShowPresenter: OrderShowPresenterInput {
    // MARK: - Properties
    weak var viewController: OrderShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: "RESPONSE_NIL", orderID: nil)
            viewController.orderDidShowLoad(fromViewModel: orderViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
        var orderCodeID: String?
        
        if let jsonOrder = responseModel.responseAPI!.body as? [String: AnyObject] {
            if let codeID = jsonOrder["uuid"] as? String {
                if let order = CoreDataManager.instance.entityBy("Order", andCodeID: codeID) as? Order {
                    order.profileDidUpload(json: jsonOrder, forList: keyOrder)
                    orderCodeID = codeID
                }
            }
        }
        
        CoreDataManager.instance.didSaveContext()
        
        let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: responseModel.responseAPI!.status, orderID: orderCodeID)
        self.viewController.orderDidShowLoad(fromViewModel: orderViewModel)
    }
    
    func orderDidPrepareToShowCreate(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: "RESPONSE_NIL", orderID: nil)
            viewController.orderDidShowLoad(fromViewModel: orderViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
        var orderCodeID: String?
        
        if let jsonOrder = responseModel.responseAPI!.body as? [String: AnyObject] {
            if let codeID = jsonOrder["uuid"] as? String {
                if let order = CoreDataManager.instance.entityBy("Order", andCodeID: codeID) as? Order {
                    order.profileDidUpload(json: jsonOrder, forList: keyOrder)
                    orderCodeID = codeID
                }
            }
        }
        
        CoreDataManager.instance.didSaveContext()
        
        let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: responseModel.responseAPI!.status, orderID: orderCodeID)
        self.viewController.orderDidShowCreate(fromViewModel: orderViewModel)
    }

    func orderDidPrepareToShowCancel(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: "RESPONSE_NIL", orderID: nil)
            viewController.orderDidShowLoad(fromViewModel: orderViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
        let orderViewModel = OrderShowModels.OrderItem.ViewModel(status: responseModel.responseAPI!.status, orderID: responseModel.responseAPI!.body as? String)
        self.viewController.orderDidShowCreate(fromViewModel: orderViewModel)
    }
    
    func totalPriceDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.TotalPrice.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let totalPriceViewModel = OrderShowModels.TotalPrice.ViewModel(status: "RESPONSE_NIL", value: nil)
            viewController.totalPriceDidShowLoad(fromViewModel: totalPriceViewModel)
            
            return
        }
        
        // Convert responseAPI body to Order CoreData object
        let totalPriceViewModel = OrderShowModels.TotalPrice.ViewModel(status: responseModel.responseAPI!.status, value: responseModel.responseAPI!.body as? Double)
        self.viewController.totalPriceDidShowLoad(fromViewModel: totalPriceViewModel)
    }
}
