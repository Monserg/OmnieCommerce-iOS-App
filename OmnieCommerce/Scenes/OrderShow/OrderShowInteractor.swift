//
//  OrderShowInteractor.swift
//  OmnieCommerce
//
//  Created by msm72 on 29.04.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Interactor component VIP-cicle
protocol OrderShowInteractorInput {
    func orderDidLoad(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func orderDidCreate(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func orderDidCancel(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel)
    func totalPriceDidLoad(withRequestModel requestModel: OrderShowModels.TotalPrice.RequestModel)
}

// MARK: - Output protocols for Presenter component VIP-cicle
protocol OrderShowInteractorOutput {
    func orderDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func orderDidPrepareToShowCreate(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func orderDidPrepareToShowCancel(fromResponseModel responseModel: OrderShowModels.OrderItem.ResponseModel)
    func totalPriceDidPrepareToShowLoad(fromResponseModel responseModel: OrderShowModels.TotalPrice.ResponseModel)
}

class OrderShowInteractor: OrderShowInteractorInput {
    // MARK: - Properties
    var presenter: OrderShowInteractorOutput!
    var worker: OrderShowWorker!
    
    
    // MARK: - Custom Functions. Business logic
    func orderDidLoad(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userGetOrderByID(requestModel.parameters, false), withHandlerResponseAPICompletion: { responseAPI in
            // Pass the result to the Presenter
            let orderResponseModel = OrderShowModels.OrderItem.ResponseModel(responseAPI: responseAPI)
            self.presenter.orderDidPrepareToShowLoad(fromResponseModel: orderResponseModel)
        })
    }
    
    func orderDidCreate(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userMakeNewOrder(requestModel.parameters, true), withHandlerResponseAPICompletion: { responseAPI in
            // Pass the result to the Presenter
            let orderResponseModel = OrderShowModels.OrderItem.ResponseModel(responseAPI: responseAPI)
            self.presenter.orderDidPrepareToShowCreate(fromResponseModel: orderResponseModel)
        })
    }
    
    func orderDidCancel(withRequestModel requestModel: OrderShowModels.OrderItem.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userCancelOrderByID(requestModel.parameters, false), withHandlerResponseAPICompletion: { responseAPI in
            // Pass the result to the Presenter
            let orderResponseModel = OrderShowModels.OrderItem.ResponseModel(responseAPI: responseAPI)
            self.presenter.orderDidPrepareToShowCancel(fromResponseModel: orderResponseModel)
        })
    }
    
    func totalPriceDidLoad(withRequestModel requestModel: OrderShowModels.TotalPrice.RequestModel) {
        MSMRestApiManager.instance.userRequestDidRun(.userGetOrderPriceWithoutDiscount(requestModel.parameters, true), withHandlerResponseAPICompletion: { responseAPI in
            // Pass the result to the Presenter
            let totalPriceResponseModel = OrderShowModels.TotalPrice.ResponseModel(responseAPI: responseAPI)
            self.presenter.totalPriceDidPrepareToShowLoad(fromResponseModel: totalPriceResponseModel)
        })
    }
}
