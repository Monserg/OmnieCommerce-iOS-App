//
//  SignUpShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 13.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol SignUpShowViewControllerInput {
    func userAppDidShowRegister(fromViewModel viewModel: SignUpShowModels.User.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol SignUpShowViewControllerOutput {
    func userAppDidRegister(fromRequestModel requestModel: SignUpShowModels.User.RequestModel)
}

class SignUpShowViewController: BaseViewController, EmailErrorMessageView, PasswordStrengthView, PasswordStrengthErrorMessageView {
    // MARK: - Properties
    var interactor: SignUpShowViewControllerOutput!
    var router: SignUpShowRouter!
    
    var textFieldManager: MSMTextFieldManager! {
        didSet {
            // Delegates
            for textField in textFieldsCollection {
                textField.delegate = textFieldManager
            }            
        }
    }
    
    var handlerRegisterButtonCompletion: HandlerRegisterButtonCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    var passwordStrengthLevel: PasswordStrengthLevel = .None

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!

    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map{ $0.style = .BottomDottedLine }
        }
    }

    // Protocol EmailErrorMessageView
    @IBOutlet weak var emailErrorMessageView: ErrorMessageView! {
        didSet {
            emailErrorMessageView.handlerHiddenCompletion = { isHidden in }
        }
    }
    
    @IBOutlet weak var emailErrorMessageViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var emailErrorMessageViewHeightConstraint: NSLayoutConstraint!

    // Protocol PasswordStrengthView
    @IBOutlet weak var passwordStrengthView: PasswordStrengthLevelView!
    
    // Protocol PasswordStrengthErrorMessageView
    @IBOutlet weak var passwordStrengthErrorMessageView: UIView!
    @IBOutlet weak var passwordStrengthErrorMessageViewTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var passwordStrengthErrorMessageViewHeightConstraint: NSLayoutConstraint!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        self.view.layoutIfNeeded()

        SignUpShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        didAddTapGestureRecognizer()

        // Create MSMTextFieldManager
        textFieldManager = MSMTextFieldManager(withTextFields: textFieldsCollection)
        textFieldManager.currentVC = self

        // Hide email error message view
        emailErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        emailErrorMessageView.didShow(false, withConstraint: emailErrorMessageViewTopConstraint)
        didHide(passwordStrengthErrorMessageView, withConstraint: passwordStrengthErrorMessageViewTopConstraint)
        passwordStrengthView.passwordStrengthLevel = .None
    }
        
    
    // MARK: - Actions
    @IBAction func handlerRegisterButtonTap(_ sender: CustomButton) {
        if (textFieldManager.checkTextFieldCollection()) {
            guard isNetworkAvailable else {
                return
            }
            
            spinnerDidStart(view)
            
            let bodyParameters: [String: Any] = [
                                                    "userName": textFieldsCollection.first!.text!,
                                                    "email": textFieldsCollection[1].text!,
                                                    "password": textFieldsCollection.last!.text!
                                                ]

            let signUpRequestModel = SignUpShowModels.User.RequestModel(parameters: bodyParameters)
            interactor.userAppDidRegister(fromRequestModel: signUpRequestModel)
        }
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            return
        }
        
        handlerCancelButtonCompletion!()
    }
}


// MARK: - SignUpShowViewControllerInput
extension SignUpShowViewController: SignUpShowViewControllerInput {
    func userAppDidShowRegister(fromViewModel viewModel: SignUpShowModels.User.ViewModel) {
        spinnerDidFinish()
        
        // Check for errors
        guard viewModel.responseAPI?.code == 200 else {
            self.alertViewDidShow(withTitle: "Error", andMessage: String(viewModel.responseAPI!.status), completion: { _ in })
            return
        }
        
        alertViewDidShow(withTitle: "Info", andMessage: "User register successful", completion: { _ in
            // Mofidy AppUser properties
            CoreDataManager.instance.appUser.userName = (self.textFieldsCollection.first?.text)!
            CoreDataManager.instance.appUser.email = self.textFieldsCollection[1].text!
            CoreDataManager.instance.appUser.password = self.textFieldsCollection.last?.text!
            CoreDataManager.instance.appUser.isAuthorized = true
            CoreDataManager.instance.didSaveContext()
            
            self.handlerRegisterButtonCompletion!()
            
            // Clear all text fields
            _ = self.textFieldsCollection.map{ $0.text = nil }
        })
    }
}
