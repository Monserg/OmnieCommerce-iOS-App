//
//  SignUpShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 13.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol SignUpShowViewControllerInput {
    func didShowPasswordTextFieldCheckResult(fromViewModel viewModel: SignUpShowModels.PasswordTextField.ViewModel)
    func didShowShowRegisterUserResult(fromViewModel viewModel: SignUpShowModels.User.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol SignUpShowViewControllerOutput {
    func didValidatePasswordTextFieldStrength(fromRequestModel requestModel: SignUpShowModels.PasswordTextField.RequestModel)
    func didRegisterUser(fromRequestModel requestModel: SignUpShowModels.User.RequestModel)
}

class SignUpShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: SignUpShowViewControllerOutput!
    var router: SignUpShowRouter!
    
    var handlerRegisterButtonCompletion: HandlerRegisterButtonCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    var passwordStrengthLevel: PasswordStrengthLevel = .None

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var passwordStrengthView: PasswordStrengthLevelView!
    @IBOutlet weak var emailErrorMessageView: ErrorMessageView!

    @IBOutlet var textFieldsCollection: [CustomTextField]! {
        willSet {
            // Delegates
            for textField in newValue {
                textField.delegate = TextFieldManager()
            }
        }
    }

    @IBOutlet weak var emailErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var emailErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        SignUpShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        // Config controls
        scrollViewBase = scrollView
        
        doInitialSetupOnLoad()
    }
    
    
    // MARK: - Custom Functions
    func doInitialSetupOnLoad() {
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        // Hide email error message view
        emailErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        emailErrorMessageViewTopConstraint.constant = -Config.Constants.errorMessageViewHeight
        emailErrorMessageView.isHidden = true
    }
        
    
    // MARK: - Actions
    @IBAction func handlerRegisterButtonTap(_ sender: CustomButton) {
        let name = textFieldsCollection.first?.text
        let email = textFieldsCollection[1].text
        let password = textFieldsCollection.last?.text
        
        guard !((name?.isEmpty)!), !((password?.isEmpty)!), !((email?.isEmpty)!) else {
            // TODO: - ADD ALERT
            showAlertView(withTitle: "Info".localized(), andMessage: "All fields can be...".localized())
            
            return
        }
        
        if (textFieldsCollection[1].checkEmailValidation(email!)) {
            let requestModel = SignUpShowModels.User.RequestModel(name: name!, email: email!, password: password!)
            interactor.didRegisterUser(fromRequestModel: requestModel)
        } else {
            emailErrorMessageView.didShow(true, withConstraint: emailErrorMessageViewTopConstraint)
        }
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        handlerCancelButtonCompletion!()
    }
}


// MARK: - SignUpShowViewControllerInput
extension SignUpShowViewController: SignUpShowViewControllerInput {
    func didShowPasswordTextFieldCheckResult(fromViewModel: SignUpShowModels.PasswordTextField.ViewModel) {
        //        passwordCheckResult?.strengthLevel = viewModel.strengthLevel
        //        passwordCheckResult?.isValid = viewModel.isValid
        //        passwordStrengthView.passwordStrengthLevel = viewModel.strengthLevel
    }
    
    func didShowShowRegisterUserResult(fromViewModel viewModel: SignUpShowModels.User.ViewModel) {
        guard viewModel.result.error == nil else {
            self.showAlertView(withTitle: "Error".localized(), andMessage: (viewModel.result.error?.description)!)
            
            return
        }
        
        Config.Constants.isUserGuest = false
        
        handlerRegisterButtonCompletion!()
    }
}
