//
//  NewsShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol NewsShowViewControllerInput {
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol NewsShowViewControllerOutput {
}

class NewsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: NewsShowViewControllerOutput!
    var router: NewsShowRouter!
    
    // Container childVC
    var animationDirection: AnimationDirection?
    var newsDataVC: NewsDataShowViewController?
    var newsActionsVC: NewsActionsShowViewController?
    
    var activeViewController: BaseViewController? {
        didSet {
            guard oldValue != nil else {
                router.updateActiveViewController()
                
                return
            }
            
            animationDirection = ((oldValue?.view.tag)! < (activeViewController?.view.tag)!) ? .FromRightToLeft : .FromLeftToRight
            router.removeInactiveViewController(inactiveViewController: oldValue)
        }
    }

    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet weak var segmentedControlView: SegmentedControlView!
    @IBOutlet weak var containerView: CustomView!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        NewsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
                
        // Container Child Views
        newsDataVC = UIStoryboard(name: "NewsShow", bundle: nil).instantiateViewController(withIdentifier: "NewsDataShowVC") as? NewsDataShowViewController
        newsActionsVC = UIStoryboard(name: "NewsShow", bundle: nil).instantiateViewController(withIdentifier: "NewsActionsShowVC") as? NewsActionsShowViewController
        activeViewController = newsDataVC
        
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        print(object: "\(type(of: self)): \(#function) run.")
        
        setupSegmentedControlView()
        containerView.autoresizesSubviews = true

        // Config smallTopBarView
        navigationBarView = smallTopBarView
        smallTopBarView.type = "Parent"
        haveMenuItem = true
    }
    
    func setupSegmentedControlView() {
        segmentedControlView.backgroundColor = UIColor.veryDarkDesaturatedBlue24
        
        segmentedControlView.actionButtonHandlerCompletion = { sender in
            switch sender.tag {
            case 1:
                self.activeViewController = self.newsActionsVC
                self.smallTopBarView.titleText = "Actions".localized()
                
            default:
                self.activeViewController = self.newsDataVC
                self.smallTopBarView.titleText = "News".localized()
            }
        }
    }
    
    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        print(object: "\(type(of: self)): \(#function) run. New size = \(size)")
        
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
        segmentedControlView.setNeedsDisplay()
        
        _ = newsDataVC!.tableView.visibleCells.map { ($0 as! DottedBorderViewBinding).dottedBorderView.setNeedsDisplay() }
        
        if (newsActionsVC!.tableView != nil) {
            _ = newsActionsVC!.tableView.visibleCells.map { ($0 as! DottedBorderViewBinding).dottedBorderView.setNeedsDisplay() }
        }
    }
}


// MARK: - NewsShowViewControllerInput
extension NewsShowViewController: NewsShowViewControllerInput {}
