//
//  NewsActionsShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 31.03.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol NewsActionsShowViewControllerInput {
    func actionsDidShowLoad(fromViewModel viewModel: NewsActionsShowModels.Actions.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol NewsActionsShowViewControllerOutput {
    func actionsDidLoad(withRequestModel requestModel: NewsActionsShowModels.Actions.RequestModel)
}

class NewsActionsShowViewController: BaseViewController {
    // MARK: - Properties
    var interactor: NewsActionsShowViewControllerOutput!
    var router: NewsActionsShowRouter!

    var actionsData = [NewsData]()
    var limit: Int!
    
    @IBOutlet weak var tableView: MSMTableView! {
        didSet {
            tableView.contentInset = UIEdgeInsetsMake(0, 0, 0, 0)
            tableView.scrollIndicatorInsets = UIEdgeInsetsMake(0, 0, 0, 0)
        }
    }
    
    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        NewsActionsShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        
        limit = (actionsData.count == 0) ? Config.Constants.paginationLimit : actionsData.count
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Create MSMTableViewControllerManager
        let actionsTableManager = MSMTableViewControllerManager.init(withTableView: self.tableView, andSectionsCount: 1, andEmptyMessageText: "NewsActions list is empty")
        tableView.tableViewControllerManager = actionsTableManager
        
        // Load Actions list from Core Data
        guard isNetworkAvailable else {
            actionsListDidShow()
            return
        }
        
        // Load Actions list from API
        if (isNetworkAvailable) {
            actionsData = [NewsData]()
            CoreDataManager.instance.entitiesDidRemove(byName: "NewsData", andPredicateParameter: true)
            actionsListDidLoad(withOffset: 0, scrollingData: false)
        } else {
            spinnerDidFinish()
        }
    }
    
    func actionsListDidLoad(withOffset offset: Int, scrollingData: Bool) {
        if (!scrollingData) {
            spinnerDidStart(view)
        }
        
        let bodyParameters: [String: Any] = [ "limit": limit, "offset": offset ]
        let actionsRequestModel = NewsActionsShowModels.Actions.RequestModel(parameters: bodyParameters)
        interactor.actionsDidLoad(withRequestModel: actionsRequestModel)
    }

    func actionsListDidShow() {
        // Setting MSMTableViewControllerManager
        let newsDataList = CoreDataManager.instance.entitiesDidLoad(byName: "NewsData", andPredicateParameter: true)
        
        if let actions = newsDataList as? [NewsData] {
            actionsData = actions
            tableView.tableViewControllerManager!.dataSource = actions
            tableView!.tableFooterView!.isHidden = (actions.count > 0) ? true : false
            
            (tableView!.tableFooterView as! MSMTableViewFooterView).didUpload(forItemsCount: actions.count,
                                                                              andEmptyText: "NewsActions list is empty")
            
            tableView.reloadData()
        }
      
        // Handler select cell
        tableView.tableViewControllerManager!.handlerSelectRowCompletion = { action in
            self.router.navigateToNewsItemShowScene(action as! NewsData)
        }
        
        // Handler PullRefresh
        tableView.tableViewControllerManager!.handlerPullRefreshCompletion = { _ in
            // Reload Actions list from API
            self.actionsData = [NewsData]()
            CoreDataManager.instance.entitiesDidRemove(byName: "NewsData", andPredicateParameter: true)
            self.actionsListDidLoad(withOffset: 0, scrollingData: true)
        }
        
        // Handler InfiniteScroll
        tableView.tableViewControllerManager.handlerInfiniteScrollCompletion = { _ in
            // Load More Actions from API
            self.actionsListDidLoad(withOffset: self.actionsData.count, scrollingData: true)
        }
        
        tableView.tableViewControllerManager.pullRefreshDidFinish()
        spinnerDidFinish()
    }
}


// MARK: - NewsActionsShowViewControllerInput
extension NewsActionsShowViewController: NewsActionsShowViewControllerInput {
    func actionsDidShowLoad(fromViewModel viewModel: NewsActionsShowModels.Actions.ViewModel) {
        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: {
                self.actionsListDidShow()
            })
            
            return
        }
        
        self.actionsListDidShow()
    }
}
