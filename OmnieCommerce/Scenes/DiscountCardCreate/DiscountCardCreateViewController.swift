//
//  DiscountCardCreateViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 24.05.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Kingfisher

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol DiscountCardCreateViewControllerInput {
    func discountCardDidShowCreate(fromViewModel viewModel: DiscountCardCreateModels.Item.ViewModel)
    func discountCardImageDidShowUpload(fromViewModel viewModel: DiscountCardCreateModels.Image.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol DiscountCardCreateViewControllerOutput {
    func discountCardDidCreate(withRequestModel requestModel: DiscountCardCreateModels.Item.RequestModel)
    func discountCardImageDidUpload(withRequestModel requestModel: DiscountCardCreateModels.Image.RequestModel)
}

class DiscountCardCreateViewController: BaseViewController {
    // MARK: - Properties
    var interactor: DiscountCardCreateViewControllerOutput!
    var router: DiscountCardCreateRouter!
    
    var imageID: String?
    var barcodeID: String?
    var discountCard: DiscountCard?

    var textFieldManager: MSMTextFieldManager! {
        didSet {
            // Delegates
            for textField in textFieldsCollection {
                textField.delegate = textFieldManager
            }
        }
    }

    // Outlets
    @IBOutlet var modalView: ModalView!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var smallTopBarView: SmallTopBarView!
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    @IBOutlet weak var photoImageView: UIImageView!
    @IBOutlet weak var barcodeImageView: UIImageView!

    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map{ $0.style = .BottomDottedLine }
        }
    }

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        DiscountCardCreateConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    

    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Config smallTopBarView
        navigationBarView = smallTopBarView
        scrollViewBase = scrollView
        smallTopBarView.type = "Child"
        haveMenuItem = false
        
        didAddTapGestureRecognizer()
        
        // Create MSMTextFieldManager
        textFieldManager = MSMTextFieldManager(withTextFields: textFieldsCollection)
        textFieldManager.currentVC = self
        textFieldManager.handlerKeywordsFieldCompletion = { _ in }
        
        // Handler Back button tap
        smallTopBarView.handlerSendButtonCompletion = { _ in
            self.navigationController?.popViewController(animated: true)
        }
        
        // Edit mode
        if (discountCard != nil) {
            textFieldsCollection.first?.text = discountCard!.name
            textFieldsCollection.last?.text = discountCard!.code
            
            if let photoImageID = discountCard!.imageID, !photoImageID.isEmpty {
                self.photoImageView.kf.setImage(with: ImageResource(downloadURL: photoImageID.convertToURL(withSize: .Medium, inMode: .Get), cacheKey: photoImageID),
                                                placeholder: UIImage.init(named: "image-no-photo"),
                                                options: [.transition(ImageTransition.fade(1)),
                                                          .processor(ResizingImageProcessor(referenceSize: self.photoImageView.frame.size,
                                                                                            mode: .aspectFill))],
                                                completionHandler: { image, error, cacheType, imageURL in
                                                    self.photoImageView.kf.cancelDownloadTask()
                                                    self.imageID = photoImageID
                })
            } else {
                self.photoImageView.backgroundColor = UIColor.init(hexString: "#273745")
            }
            
            if let barcodeImage = Barcode.convertToImageFromString(discountCard?.code) {
                self.barcodeID = discountCard!.code
                self.barcodeImageView.image = barcodeImage
            } else {
                self.barcodeImageView.backgroundColor = UIColor.init(hexString: "#273745")
            }
        }
    }
    
    func modalViewDidShow() {
        if (blackoutView == nil) {
            blackoutView = MSMBlackoutView.init(inView: view)
            blackoutView!.didShow()
        }
        
        modalView = ModalView.init(inView: blackoutView!, withHeight: 185.0)
        let popupView = ConfirmSaveView.init(inView: modalView!, withText: "DiscountCard create message")
        
        // Handler Cancel button tap
        popupView.handlerCancelButtonCompletion = { _ in
            self.blackoutView!.didHide()
            self.blackoutView = nil
            
            self.navigationController!.popViewController(animated: true)
        }
    }

    func gestureRecognizer(gestureRecognizer: UIGestureRecognizer, shouldReceiveTouch touch: UITouch) -> Bool {
        if (touch.view?.isDescendant(of: view.subviews.last!))! {
            return false
        }
        
        return true
    }
    
    func handlerResult(fromImagePicker imagePickerController: MSMImagePickerController, forAvatarButton avatarButton: UIButton) {
        // Handler Success Select Image
        imagePickerController.handlerImagePickerControllerCompletion = { image in
            if (isNetworkAvailable) {
                // Upload Image API
                self.spinnerDidStart(self.blackoutView!)
                
                let imageUploadRequestModel = DiscountCardCreateModels.Image.RequestModel(image: image)
                self.interactor.discountCardImageDidUpload(withRequestModel: imageUploadRequestModel)
            }
        }
        
        // Handler Cancel result
        imagePickerController.handlerCancelButtonCompletion = { _ in
            self.blackoutView!.didHide()
        }
    }

    
    // MARK: - Transition
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        smallTopBarView.setNeedsDisplay()
        smallTopBarView.circleView.setNeedsDisplay()
        
        _ = dottedBorderViewsCollection.map({ $0.setNeedsDisplay() })
    }

    
    // MARK: - Actions
    @IBAction func handlerSaveButtonTap(_ sender: FillVeryLightOrangeButton) {
        spinnerDidStart(view)

        let parameters: [String: Any]  =    [
                                                "imageId":  self.imageID ?? "",
                                                "name":     self.textFieldsCollection.first?.text ?? "",
                                                "code":     self.textFieldsCollection.last?.text ?? "",
                                                "format":   "QR"
                                            ]
        
        let discountCardRequestModel = DiscountCardCreateModels.Item.RequestModel(parameters: parameters)
        interactor.discountCardDidCreate(withRequestModel: discountCardRequestModel)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: BorderVeryLightOrangeButton) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @IBAction func handlerPhotoImageButtonTap(_ sender: UbuntuLightVeryLightOrangeButton) {
        self.blackoutView = MSMBlackoutView.init(inView: self.view)
        
        self.blackoutView!.didShow()
        
        let avatarActionView = AvatarActionView.init(inView: self.view)
        
        if (sender.currentImage == nil) {
            avatarActionView.deletePhotoButton.isHidden = true
        }
        
        // Handler AvatarActionView completions
        avatarActionView.handlerViewDismissCompletion = { actionType in
            switch actionType {
            // Handler Photo Make button tap
            case .PhotoUpload:
                let imagePickerController = MSMImagePickerController()
                imagePickerController.modalPresentationStyle = .overCurrentContext
                imagePickerController.photoDidLoadFromAlbum()
                
                self.present(imagePickerController, animated: true, completion: nil)
                
                // Handler MSMImagePickerController results
                self.handlerResult(fromImagePicker: imagePickerController, forAvatarButton: sender)
                
            case .PhotoMake:
                let imagePickerController = MSMImagePickerController()
                imagePickerController.modalPresentationStyle = .overCurrentContext
                
                guard imagePickerController.photoDidMakeWithCamera() else {
                    self.alertViewDidShow(withTitle: "Error", andMessage: "Camera is not available", completion: { _ in })
                    self.blackoutView!.didHide()
                    return
                }
                
                self.present(imagePickerController, animated: true, completion: nil)
                
                // Handler MSMImagePickerController results
                self.handlerResult(fromImagePicker: imagePickerController, forAvatarButton: sender)
                
            case .PhotoDelete:
                UIView.animate(withDuration: 0.7, animations: {
                    sender.setImage(UIImage.init(named: "image-no-user"), for: .normal)
                }, completion: { success in
                    appUser.imageID = nil
                    CoreDataManager.instance.didSaveContext()
                    self.blackoutView!.didHide()
                })
            }
        }
    }
    
    @IBAction func handlerBarcodeImageButtonTap(_ sender: UbuntuLightVeryLightOrangeButton) {
    }
}


// MARK: - DiscountCardCreateViewControllerInput
extension DiscountCardCreateViewController: DiscountCardCreateViewControllerInput {
    func discountCardDidShowCreate(fromViewModel viewModel: DiscountCardCreateModels.Item.ViewModel) {
        spinnerDidFinish()

        // Check for errors
        guard viewModel.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.status, completion: { })
            
            return
        }
        
        // Show success modal view
        modalViewDidShow()
    }
    
    func discountCardImageDidShowUpload(fromViewModel viewModel: DiscountCardCreateModels.Image.ViewModel) {
        // Check for errors
        guard viewModel.responseAPI!.status == "SUCCESS" else {
            self.alertViewDidShow(withTitle: "Error", andMessage: viewModel.responseAPI!.status, completion: { })
            
            return
        }
        
        // Change Avatar Button Image
        if let imageCodeID = viewModel.responseAPI?.body as? String, !imageCodeID.isEmpty {
            self.photoImageView.kf.setImage(with: ImageResource(downloadURL: imageCodeID.convertToURL(withSize: .Medium, inMode: .Get), cacheKey: imageCodeID),
                                       placeholder: UIImage.init(named: "image-no-photo"),
                                       options: [.transition(ImageTransition.fade(1)),
                                                 .processor(ResizingImageProcessor(referenceSize: self.photoImageView.frame.size,
                                                                                   mode: .aspectFill))],
                                       completionHandler: { image, error, cacheType, imageURL in
                                        self.photoImageView.kf.cancelDownloadTask()
                                        self.imageID = imageCodeID
            })
        } else {
            self.photoImageView.backgroundColor = UIColor.init(hexString: "#273745")
        }
        
        self.blackoutView!.didHide()
        self.spinnerDidFinish()
    }
}
