//
//  CategoriesShowPresenter.swift
//  OmnieCommerce
//
//  Created by msm72 on 09.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol CategoriesShowPresenterInput {
    func categoriesDidPrepareToShowLoad(fromResponseModel responseModel: CategoriesShowModels.Categories.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol CategoriesShowPresenterOutput: class {
    func categoriesDidShowLoad(fromViewModel viewModel: CategoriesShowModels.Categories.ViewModel)
}

class CategoriesShowPresenter: CategoriesShowPresenterInput {
    // MARK: - Properties
    weak var viewController: CategoriesShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func categoriesDidPrepareToShowLoad(fromResponseModel responseModel: CategoriesShowModels.Categories.ResponseModel) {
        guard responseModel.responseAPI != nil else {
            let categoriesViewModel = CategoriesShowModels.Categories.ViewModel()
            viewController.categoriesDidShowLoad(fromViewModel: categoriesViewModel)
            
            return
        }

        // Convert responseAPI body to Category CoreData objects
        for json in responseModel.responseAPI!.body as! [Any] {
            let item = Category.init(json: json as! [String: AnyObject])
            
            if let category = item {
                category.cellHeight = 102.0
                category.cellIdentifier = "CategoryCollectionViewCell"

                CoreDataManager.instance.didSaveContext()
            }
        }
        
        let categoriesViewModel = CategoriesShowModels.Categories.ViewModel()
        self.viewController.categoriesDidShowLoad(fromViewModel: categoriesViewModel)
        
        
//        responseModel.responseAPI!.itemsDidLoad(fromItemsArray: responseModel.responseAPI!.body as! [Any], withItem: Category.init(), completion: { categories in
//            // Prepare to save Categories in CoreData
//            let _ = categories.map { $0.cellHeight = 102.0; $0.cellIdentifier = "CategoryCollectionViewCell" }
////            let entityCategories = CoreDataManager.instance.entityDidLoad(byName: keyCategories) as! Categories
////            let categoriesData = NSKeyedArchiver.archivedData(withRootObject: categories) as NSData?
////            entityCategories.list = categoriesData!
//            
//            let categoriesViewModel = CategoriesShowModels.Categories.ViewModel(categories: categories)
//            self.viewController.categoriesDidShowLoad(fromViewModel: categoriesViewModel)
//        })
    }
}
