//
//  EnterCodeShowPresenter.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 07.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current Presenter component VIP-cicle
protocol EnterCodeShowPresenterInput {
    func codeDidPrepareToShowLoad(fromResponseModel responseModel: EnterCodeShowModels.Code.ResponseModel)
    func enteredCodeDidPrepareToShowCheck(fromResponseModel responseModel: EnterCodeShowModels.EnterCode.ResponseModel)
}

// MARK: - Output protocols for ViewController component VIP-cicle
protocol EnterCodeShowPresenterOutput: class {
    func codeDidShowLoad(fromViewModel viewModel: EnterCodeShowModels.Code.ViewModel)
    func enteredCodeDidShowCheck(fromViewModel viewModel: EnterCodeShowModels.EnterCode.ViewModel)
}

class EnterCodeShowPresenter: EnterCodeShowPresenterInput {
    // MARK: - Properties
    weak var viewController: EnterCodeShowPresenterOutput!
    
    
    // MARK: - Custom Functions. Presentation logic
    func codeDidPrepareToShowLoad(fromResponseModel responseModel: EnterCodeShowModels.Code.ResponseModel) {
        // Format the response from the Interactor and pass the result back to the View Controller
        let codeViewModel = EnterCodeShowModels.Code.ViewModel(code: responseModel.code)
        viewController.codeDidShowLoad(fromViewModel: codeViewModel)
    }
    
    func enteredCodeDidPrepareToShowCheck(fromResponseModel responseModel: EnterCodeShowModels.EnterCode.ResponseModel) {
        // Format the response from the Interactor and pass the result back to the View Controller
        let code = responseModel.response?.code ?? nil
        let resetToken = responseModel.response?.body ?? nil
        
        let enteredCodeViewModel = EnterCodeShowModels.EnterCode.ViewModel(responseCode: code, resetToken: resetToken)
        viewController.enteredCodeDidShowCheck(fromViewModel: enteredCodeViewModel)
    }
}
