//
//  EnterCodeShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 07.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol EnterCodeShowViewControllerInput {
    func codeDidShow(fromViewModel viewModel: EnterCodeShowModels.Code.ViewModel)
    func enteredCodeDidShow(fromViewModel viewModel: EnterCodeShowModels.EnterCode.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol EnterCodeShowViewControllerOutput {
    func codeDidLoad(fromRequestModel requestModel: EnterCodeShowModels.Code.RequestModel)
    func enteredCodeDidCheck(fromRequestModel requestModel: EnterCodeShowModels.EnterCode.RequestModel)
}

class EnterCodeShowViewController: BaseViewController, CodeErrorMessageView {
    // MARK: - Properties
    var interactor: EnterCodeShowViewControllerOutput!
    var router: EnterCodeShowRouter!
    
    var email: String!
    
    var handlerPassDataCompletion: HandlerPassDataCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    
    var textFieldManager: MSMTextFieldManager! {
        didSet {
            // Delegates
            for textField in textFieldsCollection {
                textField.delegate = textFieldManager
            }
        }
    }
    
    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map{ $0.style = .BottomDottedLine }
        }
    }

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var codeErrorMessageView: UIView!
    
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    
    @IBOutlet weak var codeErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var codeErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        self.view.layoutIfNeeded()

        EnterCodeShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Apply keyboard handler
        scrollViewBase              =   scrollView
        
        didAddTapGestureRecognizer()

        // Create MSMTextFieldManager
        textFieldManager            =   MSMTextFieldManager(withTextFields: textFieldsCollection)
        textFieldManager.currentVC  =   self
        
        // Hide email error message view
        codeErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        didHide(codeErrorMessageView, withConstraint: codeErrorMessageViewTopConstraint)
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSendButtonTap(_ sender: CustomButton) {
        guard textFieldsCollection.last?.text != nil else {
            return
        }
        
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }
        
        let requestModel    =   EnterCodeShowModels.EnterCode.RequestModel(code: Int(textFieldsCollection.first!.text!)!, email: email)
        interactor.enteredCodeDidCheck(fromRequestModel: requestModel)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }

        handlerCancelButtonCompletion!()
    }
    
    @IBAction func handlerSendAgainButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }
        
        let requestModel    =   EnterCodeShowModels.Code.RequestModel(email: email)
        interactor.codeDidLoad(fromRequestModel: requestModel)
    }
}


// MARK: - EnterCodeShowViewControllerInput
extension EnterCodeShowViewController: EnterCodeShowViewControllerInput {
    func enteredCodeDidShow(fromViewModel viewModel: EnterCodeShowModels.EnterCode.ViewModel) {
        UIApplication.shared.isNetworkActivityIndicatorVisible = false

        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            return
        }
        
        if (viewModel.responseCode == 200) {
            handlerPassDataCompletion!(viewModel.resetToken!)
        } else {
            didShow(codeErrorMessageView, withConstraint: codeErrorMessageViewTopConstraint)
        }
    }

    func codeDidShow(fromViewModel viewModel: EnterCodeShowModels.Code.ViewModel) {
        UIApplication.shared.isNetworkActivityIndicatorVisible = false

        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            return
        }
        
        if (viewModel.code == 200) {
            alertViewDidShow(withTitle: "Info".localized(), andMessage: "Retry request succeeded".localized())
        } else {
            alertViewDidShow(withTitle: "Error".localized(), andMessage: "Wrong input data".localized())
        }
    }
}
