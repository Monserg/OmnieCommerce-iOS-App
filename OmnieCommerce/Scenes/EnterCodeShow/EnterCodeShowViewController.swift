//
//  EnterCodeShowViewController.swift
//  OmnieCommerceAdmin
//
//  Created by msm72 on 07.02.17.
//  Copyright (c) 2017 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol EnterCodeShowViewControllerInput {
    func codeDidShowLoad(fromViewModel viewModel: EnterCodeShowModels.Code.ViewModel)
    func enteredCodeDidShowCheck(fromViewModel viewModel: EnterCodeShowModels.EnterCode.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol EnterCodeShowViewControllerOutput {
    func codeDidLoad(withRequestModel requestModel: EnterCodeShowModels.Code.RequestModel)
    func enteredCodeDidCheck(withRequestModel requestModel: EnterCodeShowModels.EnterCode.RequestModel)
}

class EnterCodeShowViewController: BaseViewController, CodeErrorMessageView {
    // MARK: - Properties
    var interactor: EnterCodeShowViewControllerOutput!
    var router: EnterCodeShowRouter!
    
    var handlerSendButtonCompletion: HandlerSendButtonCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?
    
    var textFieldManager: MSMTextFieldManager! {
        didSet {
            // Delegates
            for textField in textFieldsCollection {
                textField.delegate = textFieldManager
            }
        }
    }
    
    @IBOutlet var dottedBorderViewsCollection: [DottedBorderView]! {
        didSet {
            _ = dottedBorderViewsCollection.map{ $0.style = .BottomDottedLine }
        }
    }

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var codeErrorMessageView: UIView!
    
    @IBOutlet var textFieldsCollection: [CustomTextField]!
    
    @IBOutlet weak var codeErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var codeErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    // MARK: - Class initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        self.view.layoutIfNeeded()

        EnterCodeShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        didAddTapGestureRecognizer()

        // Create MSMTextFieldManager
        textFieldManager = MSMTextFieldManager(withTextFields: textFieldsCollection)
        textFieldManager.currentVC = self
        
        // Hide email error message view
        codeErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        didHide(codeErrorMessageView, withConstraint: codeErrorMessageViewTopConstraint)
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSendButtonTap(_ sender: CustomButton) {
        guard textFieldsCollection.last?.text != nil else {
            return
        }
        
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable", andMessage: "Disconnected from Network", completion: { _ in })
            
            return
        }
        
        let enterCodeRequestModel = EnterCodeShowModels.EnterCode.RequestModel(code:  Int(textFieldsCollection.first!.text!)!,
                                                                               email: UserDefaults.standard.value(forKey: keyEmail) as! String)
        interactor.enteredCodeDidCheck(withRequestModel: enterCodeRequestModel)
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable", andMessage: "Disconnected from Network", completion: { _ in })
            
            return
        }

        handlerCancelButtonCompletion!()
    }
    
    @IBAction func handlerSendAgainButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable", andMessage: "Disconnected from Network", completion: { _ in })
            
            return
        }
        
        let repeatRequestModel = EnterCodeShowModels.Code.RequestModel(email: UserDefaults.standard.value(forKey: keyEmail) as! String)
        interactor.codeDidLoad(withRequestModel: repeatRequestModel)
    }
}


// MARK: - EnterCodeShowViewControllerInput
extension EnterCodeShowViewController: EnterCodeShowViewControllerInput {
    func codeDidShowLoad(fromViewModel viewModel: EnterCodeShowModels.Code.ViewModel) {
        UIApplication.shared.isNetworkActivityIndicatorVisible = false
        
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable", andMessage: "Disconnected from Network", completion: { _ in })
            return
        }
        
        if (viewModel.code == 200) {
            alertViewDidShow(withTitle: "Info", andMessage: "Retry request succeeded", completion: { _ in })
        } else {
            alertViewDidShow(withTitle: "Error", andMessage: "Wrong input data", completion: { _ in })
        }
    }

    func enteredCodeDidShowCheck(fromViewModel viewModel: EnterCodeShowModels.EnterCode.ViewModel) {
        UIApplication.shared.isNetworkActivityIndicatorVisible = false

        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable", andMessage: "Disconnected from Network", completion: { _ in })
            return
        }
        
        if (viewModel.responseCode == 200) {
            UserDefaults.standard.set(viewModel.resetToken!, forKey: keyResetToken)
            handlerSendButtonCompletion!()
        } else {
            didShow(codeErrorMessageView, withConstraint: codeErrorMessageViewTopConstraint)
        }
    }
}
