//
//  ForgotPasswordShowViewController.swift
//  OmnieCommerce
//
//  Created by msm72 on 13.11.16.
//  Copyright (c) 2016 Omniesoft. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Input protocols for current ViewController component VIP-cicle
protocol ForgotPasswordShowViewControllerInput {
    func didPassCode(fromViewModel viewModel: ForgotPasswordShowModels.Code.ViewModel)
}

// MARK: - Output protocols for Interactor component VIP-cicle
protocol ForgotPasswordShowViewControllerOutput {
    func didLoadCode(fromRequestModel requestModel: ForgotPasswordShowModels.Code.RequestModel)
}

class ForgotPasswordShowViewController: BaseViewController, EmailErrorMessageView {
    // MARK: - Properties
    var interactor: ForgotPasswordShowViewControllerOutput!
    var router: ForgotPasswordShowRouter!
    
    var handlerPassDataCompletion: HandlerPassDataCompletion?
    var handlerCancelButtonCompletion: HandlerCancelButtonCompletion?

    var textFieldManager: TextFieldManager! {
        didSet {
            // Delegates
            for textField in textFieldsCollection {
                textField.delegate = textFieldManager
            }
        }
    }

    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var emailErrorMessageView: UIView!

    @IBOutlet var textFieldsCollection: [CustomTextField]!

    @IBOutlet weak var emailErrorMessageViewHeightConstraint: NSLayoutConstraint!
    @IBOutlet weak var emailErrorMessageViewTopConstraint: NSLayoutConstraint!

    
    // MARK: - Class Initialization
    override func awakeFromNib() {
        super.awakeFromNib()
        
        self.view.layoutIfNeeded()

        ForgotPasswordShowConfigurator.sharedInstance.configure(viewController: self)
    }
    

    // MARK: - Class Functions
    override func viewDidLoad() {
        super.viewDidLoad()
        
        viewSettingsDidLoad()
    }
    
    
    // MARK: - Custom Functions
    func viewSettingsDidLoad() {
        // Apply keyboard handler
        scrollViewBase = scrollView
        
        // Create TextFieldManager
        textFieldManager = TextFieldManager(withTextFields: textFieldsCollection)
        textFieldManager.currentVC = self
        
        // Hide email error message view
        emailErrorMessageViewHeightConstraint.constant = Config.Constants.errorMessageViewHeight
        didHide(emailErrorMessageView, withConstraint: emailErrorMessageViewTopConstraint)
    }
    
    
    // MARK: - Actions
    @IBAction func handlerSendButtonTap(_ sender: CustomButton) {
        if (textFieldManager.checkTextFieldCollection()) {
            guard isNetworkAvailable else {
                alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
                
                return
            }

            let data: (phone: String?, email: String?) = (textFieldsCollection.first!.isPhone!) ? (phone: textFieldsCollection.first!.text!, email: nil) : (phone: nil, email: textFieldsCollection.first!.text!)
            
            let requestModel = ForgotPasswordShowModels.Code.RequestModel(data: data)
            interactor.didLoadCode(fromRequestModel: requestModel)
        } else {
            didShow(emailErrorMessageView, withConstraint: emailErrorMessageViewTopConstraint)
        }
    }
    
    @IBAction func handlerCancelButtonTap(_ sender: CustomButton) {
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }

        handlerCancelButtonCompletion!()
    }
}


// MARK: - ForgotPasswordShowViewControllerInput
extension ForgotPasswordShowViewController: ForgotPasswordShowViewControllerInput {
    func didPassCode(fromViewModel viewModel: ForgotPasswordShowModels.Code.ViewModel) {
        // TODO: PASS CODE TO ENTER CODE SCENE
        print(object: viewModel.code)
        
        guard isNetworkAvailable else {
            alertViewDidShow(withTitle: "Not Reachable".localized(), andMessage: "Disconnected from Network".localized())
            
            return
        }

        handlerPassDataCompletion!(viewModel.code)
    }
}
